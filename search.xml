<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo · 博客编写手册</title>
    <url>/2025/02/22/Hexo%C2%B7%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-bullhorn flat"><p><mark class="hl-label orange">引用文章</mark></p>
<ul>
<li>安知鱼主题官方文档：https://docs.anheyu.com/</li>
<li>安知鱼主题标签Tag
Plugins：https://blog.anheyu.com/posts/d50a.html</li>
</ul>
</div>
<h1 id="页面配置front-matter">1. 页面配置Front-matter</h1>
<p>转载至：<a
href="https://docs.anheyu.com/page/front-matter.html">https://docs.anheyu.com/page/front-matter.html</a></p>
<p>页面配置 <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 页面标题</span><br><span class="line">date: 页面创建日期</span><br><span class="line">updated: 页面更新日期</span><br><span class="line">description: 页面描述</span><br><span class="line">keywords: 页面关键字</span><br><span class="line">top<span class="emphasis">_img: 页面顶部图片</span></span><br></pre></td></tr></table></figure></p>
<h1 id="页面小组件">2. 页面小组件</h1>
<div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>请参考 安知鱼主题标签Tag Plugins文章：<a
href="https://blog.anheyu.com/posts/d50a.html">https://blog.anheyu.com/posts/d50a.html</a></p>
</div>
<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.anheyu.com/posts/d50a.html">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">安知鱼主题标签Tag Plugins文章</div>
            <div class="tag-link-sitename">https://blog.anheyu.com/posts/d50a.html</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<h2 id="数学公式">2.1 数学公式</h2>
<h3 id="m的n次幂">2.1.1 m的n次幂</h3>
<p>m<sup>n</sup>编写方式： <span class='p red'>m^n^</span></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo · 安知鱼主题-魔改-配置LaTeX数学公式</title>
    <url>/2025/02/26/Hexo%C2%B7%E5%AE%89%E7%9F%A5%E9%B1%BC%E4%B8%BB%E9%A2%98-%E9%AD%94%E6%94%B9-%E9%85%8D%E7%BD%AE%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="魔改原因">1. 魔改原因</h1>
<ul>
<li>由于hexo默认支持的hexo-renderer-marked渲染器不支持latex公式。无法很好的显示数学公式，所以需要对应的魔改配置。</li>
</ul>
<h1 id="解决方案">2. 解决方案</h1>
<h2 id="卸载hexo-math和hexo-renderer-marked渲染引擎">2.1
卸载hexo-math和hexo-renderer-marked渲染引擎</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm un hexo-math</span><br><span class="line">npm un hexo-renderer-marked</span><br></pre></td></tr></table></figure>
<h2 id="安装hexo-renderer-pandoc渲染器">2.2
安装hexo-renderer-pandoc渲染器</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-pandoc</span><br></pre></td></tr></table></figure>
<h2 id="安装mathjax公式引擎">2.3 安装mathjax公式引擎</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-mathjax</span><br></pre></td></tr></table></figure>
<h2 id="下载pandoc">2.4 下载Pandoc</h2>
<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://pandoc.org/installing.html#windows">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Pandoc下载地址</div>
            <div class="tag-link-sitename">https://pandoc.org</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<h2 id="配置pandoc路径和参数">2.5 配置Pandoc路径和参数</h2>
<blockquote>
<p>在Hexo的_config.yml的文件中添加以下配置项 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pandoc:</span><br><span class="line">  pandoc_path: C:/Program Files/Pandoc/pandoc.exe  # Pandoc文件位置</span><br><span class="line">  args:</span><br><span class="line">    - &quot;-f&quot;</span><br><span class="line">    - &quot;markdown&quot;</span><br><span class="line">    - &quot;-t&quot;</span><br><span class="line">    - &quot;html&quot;</span><br><span class="line">    - &quot;--mathjax&quot;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="主题配置文件修改">2.6 主题配置文件修改</h2>
<p>将mathjax中的enable，per_page改为true <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># MathJax</span><br><span class="line">mathjax:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: true</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>实用工具 · AI</title>
    <url>/2025/03/01/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%C2%B7AI/</url>
    <content><![CDATA[<ul>
<li>AI工具一览表
<ul>
<li>豆包AI:通用性AI(产出文字)</li>
<li>DeepSeek:通用性AI(产出文字)</li>
<li>即梦AI：生成图片</li>
<li>剪影AI：生成视频</li>
</ul></li>
</ul>
<h1 id="图片">1.图片</h1>
<h2 id="生成ai图片的提示词文案标题">1.1
生成AI图片的提示词，文案，标题</h2>
<ul>
<li>豆包AI <div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.doubao.com/">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">豆包AI</div>
            <div class="tag-link-sitename">https://www.doubao.com</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">身份:现在你是一名专业的小红书运营</span><br><span class="line">技能:你很擅长运营猫咪穿搭分享的账号，这个账号的特色在于猫咪模特会像人类一样站立并展示穿搭，注意，猫咪在分享穿搭时会使用双脚站立，这是它们像人类的关键特点。</span><br><span class="line">要求:现在需要你为这个账号创作内容包括3部分:图片、标题、文案，对于图片，我需要你提供相应的AI生图提示词，对于标题和文案，也请你将他们用表格列给我。</span><br><span class="line">输出:现在请你帮我列出10组相应内容</span><br></pre></td></tr></table></figure>
<h2 id="生成图片">1.2 生成图片</h2>
<ul>
<li><p>即梦AI <div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://jimeng.jianying.com/ai-tool/home">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">即梦AI</div>
            <div class="tag-link-sitename">https://jimeng.jianying.com/ai-tool</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div></p></li>
<li><p>豆包</p></li>
<li><p>可灵</p></li>
<li><p>讯飞星火</p></li>
<li><p>文心一格</p></li>
<li><p>即时设计</p></li>
<li><p>即梦</p></li>
<li><p>奇域AI</p></li>
<li><p>Midjourney</p></li>
</ul>
<h2 id="ai设计封面配图">1.3 AI设计封面，配图</h2>
<ul>
<li>图怪兽</li>
<li>稿定设计</li>
<li>懒设计</li>
<li>创客贴</li>
<li>可画设计</li>
<li>凡科快图</li>
</ul>
<h1 id="视频">2. 视频</h1>
<h2 id="生成视频">2.1 生成视频</h2>
<ul>
<li>即梦AI <div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://jimeng.jianying.com/ai-tool/home">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">即梦AI</div>
            <div class="tag-link-sitename">https://jimeng.jianying.com/ai-tool</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div></li>
</ul>
<h2 id="视频添加声音">2.2 视频添加声音</h2>
<ul>
<li>剪影AI <div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.capcut.cn/learning">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">剪影</div>
            <div class="tag-link-sitename">https://www.capcut.cn/learning</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div></li>
</ul>
<h1 id="代码设计">3. 代码设计</h1>
<h2 id="sealos-devbox">3.1 Sealos-Devbox</h2>
<ul>
<li>Sealos(https://sealos.run)
是一个以K8s为内核的云操作系统。一个无需云计算专业知识，也能在几秒钟内部署，管理和扩展应用的云操作系统，使开发者能够使用个人电脑一样简单地使用云。有使用次数限制。</li>
</ul>
<h2 id="cursor">3.2 Cursor</h2>
<ul>
<li>Cursor(https://www.cursor.com)
是一款AI代码编辑器，基于它可以轻松的完成前端，后端代码的编写，调试。国外网站-有使用次数限制。</li>
</ul>
<h2 id="trae">3.3 TRAE</h2>
<ul>
<li>AI 代码编辑器，国内，免费。</li>
</ul>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>开发工具 · VMwareStation</title>
    <url>/2025/03/21/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%C2%B7VMwareStation/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo · 安知鱼主题部署</title>
    <url>/2025/02/23/Hexo%C2%B7%E9%83%A8%E7%BD%B2%E5%AE%89%E7%9F%A5%E9%B1%BC%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-bullhorn flat"><p><mark class="hl-label orange">引用文章</mark></p>
<p>安知鱼主题官方文档：<a
href="https://docs.anheyu.com">https://docs.anheyu.com</a></p>
</div>
<div class="note info simple"><p>info：本文档为博主自己部署Hexo-<span
class="p red">安知鱼主题</span>的步骤
<mark class="hl-label green">Windows</mark></p>
</div>
<ul>
<li>Hexo官方文档</li>
</ul>
<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://hexo.io/zh-cn/docs/">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Hexo官方文档</div>
            <div class="tag-link-sitename">https://hexo.io/zh-cn/docs</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<ul>
<li>安知鱼主题官方文档</li>
</ul>
<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://docs.anheyu.com/">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">安知鱼主题官方文档</div>
            <div class="tag-link-sitename">https://docs.anheyu.com</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<h1 id="安装hexo基础环境">1. 安装Hexo基础环境</h1>
<div class="note warning simple"><p>安装Hexo需要提前安装</p>
<ul>
<li><p>Node.js <a href="../环境安装·Node.js">[Node.js安装链接]</a>
(Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</p></li>
<li><p>Git <a href="../环境安装·Git">[Git安装链接]</a></p></li>
</ul>
</div>
<ul>
<li>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h1 id="安装安知鱼主题">2. 安装安知鱼主题</h1>
<h2 id="github克隆项目">2.1 Github克隆项目</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b main https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu</span><br></pre></td></tr></table></figure>
<h2 id="应用主题">2.2 应用主题</h2>
<p>打开 Hexo 根目录下的 config.yml, 找到以下配置项，把主题改为anzhiyu。
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: anzhiyu</span><br></pre></td></tr></table></figure></p>
<h2 id="覆盖配置">2.3 覆盖配置</h2>
<p>覆盖配置可以使主题配置放置在 anzhiyu
目录之外，避免在更新主题时丢失自定义的配置。</p>
<div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1"><svg t="1740318353602" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2166" width="200" height="200"><path d="M180.532703 507.367493c158.678976-65.355497 235.486292-30.474059 304.269865 16.21838l-79.440283 273.0447c-69.018933-46.431495-144.083559-84.635609-303.396985-18.776645l77.643358-270.088368L180.532703 507.367493z" p-id="2167"></path><path d="M526.399965 549.988196c68.989257 46.397726 139.539057 80.43903 301.656341 24.985044l-75.661214 263.243473c-159.14151 65.832358-235.541551 28.585035-304.439734-18.128893L526.399965 549.988196z" p-id="2168"></path><path d="M498.022661 474.363821c-41.512463-27.970028-86.198198-54.113455-149.667741-54.582129-41.86448-0.322341-91.709725 11.587919-155.011446 37.731346l78.410837-271.752264c159.198815-65.822125 235.701187-28.520567 304.673048 18.128893L498.022661 474.363821z" p-id="2169"></path><path d="M922.033677 249.996774c-158.988014 65.700351-235.394195 28.753881-304.214606-17.613146l-78.428234 271.986601c68.7672 46.62797 151.876036 84.896552 304.315914 16.685008L922.033677 249.996774z" p-id="2170"></path></svg> Windows</button><button type="button" class="tab " data-href="test4-2"><svg t="1740318469081" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3222" width="200" height="200"><path d="M834.198588 918.588235c-30.659765 15.661176-71.559529 50.115765-86.618353 64.572236-11.324235 10.782118-58.066824 16.203294-84.449882 2.710588-30.659765-15.661176-14.516706-40.417882-61.861647-41.923765-23.672471-0.602353-46.802824-0.602353-69.933177-0.602353-20.419765 0.602353-40.839529 1.626353-61.861647 2.108235-70.957176 1.626353-77.944471 47.405176-123.723294 45.778824-31.201882-1.084235-70.415059-25.840941-138.24-39.755294-47.344941-9.758118-93.003294-12.348235-102.761412-33.370353-9.637647-21.022118 11.866353-44.634353 13.432471-65.054118 1.626353-27.467294-20.419765-64.572235-4.276706-78.607059 13.974588-12.348235 43.550118-3.252706 62.885647-13.914352 20.419765-11.806118 29.033412-21.022118 29.033412-46.260706 7.529412 25.720471-0.542118 46.682353-17.227294 56.922353-10.24 6.445176-29.033412 9.697882-44.694588 8.131764-12.348235-1.144471-19.877647 0.481882-23.130353 5.360941-4.818824 5.903059-3.252706 16.685176 2.710588 30.659765 5.903059 13.974588 12.890353 23.130353 11.806118 40.297412-0.542118 17.227294-19.877647 37.707294-16.624942 52.224 1.084235 5.421176 6.445176 10.24 19.877647 13.974588 21.504 5.903059 60.777412 11.806118 98.966589 21.022118 42.526118 10.721882 86.618353 30.057412 114.085647 26.322823 81.739294-11.324235 34.936471-98.966588 22.046117-119.868235-69.391059-108.724706-115.109647-179.681882-151.67247-151.732706-9.155765 7.529412-9.697882-18.311529-9.155765-28.551529 1.626353-35.538824 19.395765-48.368941 30.117647-75.836236 20.419765-52.224 36.020706-111.856941 67.222588-142.516705 23.311059-30.177882 59.873882-79.088941 66.921412-104.869647-5.963294-55.958588-7.589647-115.109647-8.613647-166.671059-1.084235-55.416471 7.529412-103.905882 69.933177-137.697883C453.391059 33.310118 473.268706 30.117647 494.290824 30.117647c37.104941-0.602353 78.486588 10.24 104.869647 29.575529 41.984 31.201882 68.306824 97.340235 65.114353 144.624942-2.168471 37.104941 4.276706 75.294118 16.143058 115.109647 13.974588 46.802824 36.080941 79.570824 71.55953 117.217882 42.526118 45.176471 75.836235 133.903059 85.534117 190.343529 8.613647 52.826353-3.252706 85.594353-14.516705 87.220706-17.227294 2.590118-27.949176 56.922353-81.739295 54.814118-34.394353-1.626353-37.647059-22.046118-47.344941-39.815529-15.600941-27.407059-31.201882-18.793412-37.104941 10.24-3.252706 14.516706-1.144471 36.080941 3.734588 52.103529 9.697882 33.912471 6.445176 65.656471 0.542118 104.929882-11.324235 74.209882 52.163765 88.184471 94.689882 52.645647 41.923765-34.876235 51.079529-40.297412 103.785412-58.608941 80.112941-27.467294 53.248-51.621647 10.179765-66.138353-38.731294-12.950588-40.297412-78.064941-26.383059-90.413176 3.252706 69.933176 39.815529 80.173176 54.874353 89.810823 66.138353 41.020235-24.756706 74.932706-64.030118 94.810353z m-90.352941-259.734588c14.516706-48.489412 8.071529-67.764706-1.566118-113.543529-7.529412-34.394353-39.273412-81.257412-64.030117-95.713883 6.445176 5.360941 18.311529 20.961882 30.659764 44.574118 21.504 40.417882 43.008 100.050824 29.033412 149.564235-5.360941 19.275294-18.251294 21.985882-26.864941 22.528-37.647059 4.336941-15.600941-45.176471-31.201882-112.338823-17.769412-75.354353-36.020706-80.715294-40.297412-86.618353-22.166588-97.822118-46.320941-88.124235-53.368471-124.687059-5.903059-32.828235 28.551529-59.693176-18.251294-68.848941-14.516706-2.710588-34.936471-17.227294-43.008-18.31153-8.071529-1.024-12.408471-54.332235 17.709177-55.958588 29.575529-2.168471 34.996706 33.370353 29.575529 47.405177-8.553412 13.914353 0.542118 19.335529 15.119059 14.45647 11.806118-3.734588 4.276706-34.936471 6.987294-39.213176-7.529412-45.176471-26.383059-51.621647-45.718588-55.416471-74.270118 5.903059-40.899765 87.702588-48.429177 80.173177-10.782118-11.324235-41.923765-1.084235-41.923764-8.131765 0.542118-41.923765-13.492706-66.138353-32.828236-66.680471-21.504-0.542118-30.117647 29.575529-31.201882 46.742589-1.626353 16.143059 9.155765 50.115765 17.227294 47.405176 5.360941-1.626353 14.516706-12.408471 4.818824-11.806118-4.818824 0-12.348235-11.866353-13.432471-25.840941-0.542118-14.034824 4.879059-28.009412 23.130353-27.467294 20.961882 0.542118 20.961882 42.465882 18.793412 44.092235-6.927059 4.818824-15.600941 14.034824-16.685177 15.600942-6.927059 11.324235-20.359529 14.456471-25.780706 19.395764-9.155765 9.637647-11.264 20.419765-4.276705 24.154353 24.696471 13.974588 16.624941 30.057412 51.079529 31.262118 22.588235 1.084235 39.213176-3.252706 54.874353-8.07153 11.806118-3.734588 50.055529-11.806118 58.066823-25.840941 3.734588-5.903059 8.071529-5.903059 10.721883-4.276706 5.360941 2.650353 6.445176 12.890353-6.987294 16.143059-18.793412 5.421176-37.647059 15.661176-54.814118 22.106353-16.685176 6.927059-22.046118 9.637647-37.647059 12.288-35.478588 6.445176-61.801412-12.890353-38.189176 10.24 8.071529 7.529412 15.600941 12.348235 36.020706 11.866353 45.176471-1.626353 95.232-56.018824 100.050823-31.804235 1.024 5.360941-14.034824 11.806118-25.840941 17.769412-41.923765 20.419765-71.499294 61.319529-98.424471 47.284705-24.214588-12.890353-48.368941-72.643765-47.887058-45.658353 0.542118 41.381647-54.332235 77.944471-29.033412 125.289412-16.685176 4.216471-53.790118 83.365647-59.151059 124.205177-3.252706 23.672471 2.168471 52.705882-3.794824 68.848941-8.071529 23.672471-44.634353-22.588235-32.768-79.028706 2.108235-9.637647 0-11.866353-2.710588-6.927059-14.516706 26.322824-6.445176 63.427765 5.360941 89.208471 4.879059 11.324235 17.227294 16.143059 26.383059 25.840941 18.793412 21.443765 93.003294 76.378353 105.953883 89.810823a33.008941 33.008941 0 0 1-22.588236 55.898353c17.769412 33.370353 34.936471 36.623059 34.454588 90.895059 20.419765-10.721882 12.408471-34.394353 3.734589-49.392941-5.963294-10.842353-13.432471-15.661176-11.866353-18.311529 1.084235-1.626353 11.866353-10.842353 17.769412-3.734589 18.251294 20.419765 52.705882 24.154353 89.268705 19.33553 37.104941-4.336941 76.920471-17.227294 95.171765-46.802824 8.613647-13.974588 14.516706-18.793412 18.31153-16.143059 4.276706 2.108235 5.963294 11.806118 5.360941 27.949177-0.542118 17.227294-7.529412 34.996706-12.348236 49.513412-4.879059 16.685176-6.445176 27.949176 9.697883 28.551529 4.276706-30.177882 12.890353-59.753412 15.058823-89.871059 2.710588-34.394353-22.046118-97.822118 4.879059-129.626353 6.987294-8.613647 15.540706-9.637647 27.407059-9.637647 1.566118-43.068235 67.764706-39.755294 89.810823-22.046117 0-9.758118-20.961882-18.853647-29.575529-22.648471zM304.971294 503.988706c-3.794824 6.927059-13.432471 12.288-5.963294 13.43247 2.710588 0.542118 10.24-6.023529 13.492706-13.43247 2.650353-9.155765 5.360941-14.034824 1.084235-15.661177-4.879059-1.566118-3.794824 8.071529-8.613647 15.661177z m123.120941-291.538824c-6.445176-1.626353-5.360941 8.011294-2.108235 6.987294 2.168471 0 4.879059 3.252706 3.734588 8.07153-1.084235 6.445176-0.542118 10.842353 4.336941 10.842353 0.542118 0 1.566118 0 1.566118-1.626353 2.228706-13.552941-4.276706-23.190588-7.529412-24.274824z m14.576941 49.453177c-5.360941 0.542118-4.336941-11.866353 12.890353-10.782118-10.782118 1.084235-6.987294 10.782118-12.890353 10.782118z m44.092236-9.155765c15.600941-6.927059 20.961882 3.794824 15.600941 5.963294-5.421176 1.566118-5.963294-8.673882-15.600941-5.963294z m65.054117-43.550118c-6.987294 0.602353-4.818824 3.734588-1.566117 4.818824 4.276706 1.204706 8.613647 8.673882 9.697882 16.685176 0 1.084235 5.360941-1.084235 5.360941-2.710588 0.481882-12.830118-10.782118-19.275294-13.492706-18.793412z m31.201883-116.133647c-4.276706-4.336941-8.613647-8.131765-12.890353-8.131764-10.782118 1.084235-5.421176 12.348235-6.987294 17.769411-2.168471 5.903059-10.179765 10.782118-4.818824 15.058824 4.879059 3.734588 8.071529-5.903059 18.31153-9.637647 2.650353-1.144471 15.058824 0.481882 17.709176-5.421177 0.481882-2.710588-6.445176-5.903059-11.324235-9.637647z m59.693176 237.628236c-10.179765-6.384941-12.348235-17.167059-16.082823-13.432471-11.324235 12.348235 13.974588 38.189176 24.69647 40.417882 6.445176 1.084235 11.324235-7.589647 9.697883-15.119058-2.168471-10.179765-9.697882-6.445176-18.31153-11.866353z" p-id="3223"></path></svg> Linux</button><button type="button" class="tab " data-href="test4-3"><svg t="1740318517038" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="4285" width="200" height="200"><path d="M849.124134 704.896288c-1.040702 3.157923-17.300015 59.872622-57.250912 118.190843-34.577516 50.305733-70.331835 101.018741-126.801964 101.909018-55.532781 0.976234-73.303516-33.134655-136.707568-33.134655-63.323211 0-83.23061 32.244378-135.712915 34.110889-54.254671 2.220574-96.003518-54.951543-130.712017-105.011682-70.934562-102.549607-125.552507-290.600541-52.30118-416.625816 36.040844-63.055105 100.821243-103.135962 171.364903-104.230899 53.160757-1.004887 103.739712 36.012192 136.028093 36.012192 33.171494 0 94.357018-44.791136 158.90615-38.089503 27.02654 1.151219 102.622262 11.298324 151.328567 81.891102-3.832282 2.607384-90.452081 53.724599-89.487104 157.76107C739.079832 663.275355 847.952448 704.467523 849.124134 704.896288M633.69669 230.749408c29.107945-35.506678 48.235584-84.314291 43.202964-132.785236-41.560558 1.630127-92.196819 27.600615-122.291231 62.896492-26.609031 30.794353-50.062186 80.362282-43.521213 128.270409C557.264926 291.935955 604.745311 264.949324 633.69669 230.749408" p-id="4286"></path></svg> Mac</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p>windows
复制<span class='p green'>/themes/anzhiyu/_config.yml</span>此文件到
hexo
根目录，并重命名为<span class='p red'>_config.anzhiyu.yml</span></p></div><div class="tab-item-content" id="test4-2"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -rf ./themes/anzhiyu/_config.yml ./_config.anzhiyu.yml</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-3"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -rf ./themes/anzhiyu/_config.yml ./_config.anzhiyu.yml</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>
<h1 id="安知鱼主题配置">3. 安知鱼主题配置</h1>
<div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>请参考 安知鱼主题配置文章：<a
href="https://docs.anheyu.com/initall.html">https://docs.anheyu.com/initall.html</a></p>
</div>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>技术提升 · LeetCode题库</title>
    <url>/2025/02/24/%E6%8A%80%E6%9C%AF%E6%8F%90%E5%8D%87%C2%B7LeetCode%E9%A2%98%E5%BA%93/</url>
    <content><![CDATA[<div class="note red anzhiyufont anzhiyu-icon-fan modern"><p>本文章记录LeetCode题库内容，每日更新一道算法题</p>
</div>
<h1 id="两数之和">1. 两数之和</h1>
<details class="folding-tag" yellow=""><summary> 难度：简单   考察点：数组 </summary>
              <div class="content">
              <ul><li><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值 target 的那 两个 整数，并返回它们的数组下标。</p></li><li><p>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。</p></li><li><p>你可以按任意顺序返回答案。</p></li><li><p>示例 1： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure></p></li><li><p>示例 2： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure></p></li><li><p>示例 3： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure></p></li></ul>
              </div>
            </details>
<details class="folding-tag" cyan=""><summary> 个人题解 </summary>
              <div class="content">
              <ul><li>时间复杂度：O(N 2)，其中 N是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。</li><li>空间复杂度：O(1)。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) {</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; nums.length; i++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++){</span><br><span class="line">                <span class="keyword">if</span>(nums[i] + nums[j] == target){</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]{i, j};</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul>
              </div>
            </details>
<details class="folding-tag" green=""><summary> 优秀题解 </summary>
              <div class="content">
              <ul><li><p>时间复杂度：O(N)，其中 N 是数组中的元素数量。对于每一个元素x，我们可以 O(1) 地寻找 target - x。</p></li><li><p>空间复杂度：O(N)，其中 N 是数组中的元素数量。主要为哈希表的开销。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) {</span><br><span class="line">        Map&lt;Integer, Integer&gt; hashtable = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; ++i) {</span><br><span class="line">            <span class="keyword">if</span> (hashtable.containsKey(target - nums[i])) {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]{hashtable.get(target - nums[i]), i};</span><br><span class="line">            }</span><br><span class="line">            hashtable.put(nums[i], i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">作者：力扣官方题解</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/two-sum/solutions/434597/liang-shu-zhi-he-by-leetcode-solution/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure></p></li></ul>
              </div>
            </details>
<h1 id="两数相加">2. 两数相加</h1>
<details class="folding-tag" yellow=""><summary> 难度：中等   考察点：链表 </summary>
              <div class="content">
              <ul><li><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p></li><li><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p></li><li><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p></li><li><p>示例 1： <img src="/images/page_img/addtwonumber1.jpg"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [2,4,3], l2 = [5,6,4]</span><br><span class="line">输出：[7,0,8]</span><br><span class="line">解释：342 + 465 = 807.</span><br></pre></td></tr></table></figure></p></li><li><p>示例 2： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [0], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure></p></li><li><p>示例 3： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</span><br><span class="line">输出：[8,9,9,9,0,0,0,1]</span><br></pre></td></tr></table></figure></p></li><li><p>提示 每个链表中的节点数在范围 [1, 100] 内 0 &lt;= Node.val &lt;=9 题目数据保证列表表示的数字不含前导零</p></li></ul>
              </div>
            </details>
<details class="folding-tag" green=""><summary> 优秀题解 </summary>
              <div class="content">
              <ul><li><p>时间复杂度：O(max(m,n))，其中 m 和 n分别为两个链表的长度。我们要遍历两个链表的全部位置，而处理每个位置只需要O(1) 的时间。</p></li><li><p>空间复杂度：O(1)。注意返回值不计入空间复杂度。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="literal">null</span>, tail = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">null</span> || l2 != <span class="literal">null</span>) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> l1 != <span class="literal">null</span> ? l1.val : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> l2 != <span class="literal">null</span> ? l2.val : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> n1 + n2 + carry;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="literal">null</span>) {</span><br><span class="line">                head = tail = <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum % <span class="number">10</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                tail.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum % <span class="number">10</span>);</span><br><span class="line">                tail = tail.next;</span><br><span class="line">            }</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (l1 != <span class="literal">null</span>) {</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (l2 != <span class="literal">null</span>) {</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) {</span><br><span class="line">            tail.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(carry);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">作者：力扣官方题解</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/add-two-numbers/solutions/435246/liang-shu-xiang-jia-by-leetcode-solution/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure></p></li></ul>
              </div>
            </details>
<h1 id="无重复字符的最长子串">3. 无重复字符的最长子串</h1>
<details class="folding-tag" yellow=""><summary> 难度：中等   考察点：字符串 </summary>
              <div class="content">
              <ul><li><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长 子串的长度。</p></li><li><p>示例 1： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = "abcabcbb"</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。</span><br></pre></td></tr></table></figure></p></li><li><p>示例 2： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = "bbbbb"</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。</span><br></pre></td></tr></table></figure></p></li><li><p>示例 3： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = "pwwkew"</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure></p></li><li><p>提示</p></li><li><p>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></p></li><li><p>s 由英文字母、数字、符号和空格组成</p></li></ul>
              </div>
            </details>
<details class="folding-tag" green=""><summary> 优秀题解 </summary>
              <div class="content">
              <ul><li><p>时间复杂度O(N*∣Σ∣)。因为不重复子串区间长度不会超过ASCII码字符集的长度∣Σ∣=128，当N足够大时，时间复杂度接近O(N)。</p></li><li><p>空间复杂度O(1)。跟官方解法相比，这个解法省去了哈希表占用的空间。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, length = <span class="number">0</span>, max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> right=<span class="number">0</span>; right &lt; s.length(); right++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> left; k &lt; right; k++){</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(k) == s.charAt(right)){</span><br><span class="line">                left = k+<span class="number">1</span>;</span><br><span class="line">                length = right-left;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">if</span>(max &lt; length) max = length;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p></li></ul>
              </div>
            </details>
<h1 id="寻找两个正序数组的中位数">4. 寻找两个正序数组的中位数</h1>
<details class="folding-tag" yellow=""><summary> 难度：困难   考察点：二分法 </summary>
              <div class="content">
              <ul><li><p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和nums2。请你找出并返回这两个正序数组的 中位数 。</p></li><li><p>算法的时间复杂度应该为 O(log (m+n)) 。</p></li><li><p>示例 1： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,3], nums2 = [2]</span><br><span class="line">输出：2.00000</span><br><span class="line">解释：合并数组 = [1,2,3] ，中位数 2</span><br></pre></td></tr></table></figure></p></li><li><p>示例 2： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2], nums2 = [3,4]</span><br><span class="line">输出：2.50000</span><br><span class="line">解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5</span><br></pre></td></tr></table></figure></p></li><li><p>提示</p></li><li><p>nums1.length == m</p></li><li><p>nums2.length == n</p></li><li><p>0 &lt;= m &lt;= 1000</p></li><li><p>0 &lt;= n &lt;= 1000</p></li><li><p>1 &lt;= m + n &lt;= 2000</p></li><li><p>-10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;=10<sup>6</sup></p></li></ul>
              </div>
            </details>
<details class="folding-tag" green=""><summary> 优秀题解 </summary>
              <div class="content">
              <ul><li><p>时间复杂度：O(log(m+n))，其中 m 和 n 分别是数组 nums <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="10.243ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 4527.6 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1008.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">和</text></g><g data-mml-node="mi" transform="translate(2008.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2608.6,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3180.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4058.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container>x_{2}的长度。初始时有 k=(m+n)/2 或k=(m+n)/2+1，每一轮循环可以将查找范围减少一半，因此时间复杂度是O(log(m+n))。</p></li><li><p>空间复杂度：O(1)。</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedianSortedArrays</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">length1</span> <span class="operator">=</span> nums1.length, length2 = nums2.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalLength</span> <span class="operator">=</span> length1 + length2;</span><br><span class="line">        <span class="keyword">if</span> (totalLength % <span class="number">2</span> == <span class="number">1</span>) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">midIndex</span> <span class="operator">=</span> totalLength / <span class="number">2</span>;</span><br><span class="line">            <span class="type">double</span> <span class="variable">median</span> <span class="operator">=</span> getKthElement(nums1, nums2, midIndex + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> median;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="type">int</span> <span class="variable">midIndex1</span> <span class="operator">=</span> totalLength / <span class="number">2</span> - <span class="number">1</span>, midIndex2 = totalLength / <span class="number">2</span>;</span><br><span class="line">            <span class="type">double</span> <span class="variable">median</span> <span class="operator">=</span> (getKthElement(nums1, nums2, midIndex1 + <span class="number">1</span>) + getKthElement(nums1, nums2, midIndex2 + <span class="number">1</span>)) / <span class="number">2.0</span>;</span><br><span class="line">            <span class="keyword">return</span> median;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getKthElement</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span> k)</span> {</span><br><span class="line">        <span class="comment">/* 主要思路：要找到第 k (k&gt;1) 小的元素，那么就取 pivot1 = nums1[k/2-1] 和 pivot2 = nums2[k/2-1] 进行比较</span></span><br><span class="line"><span class="comment">         * 这里的 "/" 表示整除</span></span><br><span class="line"><span class="comment">         * nums1 中小于等于 pivot1 的元素有 nums1[0 .. k/2-2] 共计 k/2-1 个</span></span><br><span class="line"><span class="comment">         * nums2 中小于等于 pivot2 的元素有 nums2[0 .. k/2-2] 共计 k/2-1 个</span></span><br><span class="line"><span class="comment">         * 取 pivot = min(pivot1, pivot2)，两个数组中小于等于 pivot 的元素共计不会超过 (k/2-1) + (k/2-1) &lt;= k-2 个</span></span><br><span class="line"><span class="comment">         * 这样 pivot 本身最大也只能是第 k-1 小的元素</span></span><br><span class="line"><span class="comment">         * 如果 pivot = pivot1，那么 nums1[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 "删除"，剩下的作为新的 nums1 数组</span></span><br><span class="line"><span class="comment">         * 如果 pivot = pivot2，那么 nums2[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 "删除"，剩下的作为新的 nums2 数组</span></span><br><span class="line"><span class="comment">         * 由于我们 "删除" 了一些元素（这些元素都比第 k 小的元素要小），因此需要修改 k 的值，减去删除的数的个数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">length1</span> <span class="operator">=</span> nums1.length, length2 = nums2.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> <span class="number">0</span>, index2 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">kthElement</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">            <span class="comment">// 边界情况</span></span><br><span class="line">            <span class="keyword">if</span> (index1 == length1) {</span><br><span class="line">                <span class="keyword">return</span> nums2[index2 + k - <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (index2 == length2) {</span><br><span class="line">                <span class="keyword">return</span> nums1[index1 + k - <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">return</span> Math.min(nums1[index1], nums2[index2]);</span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 正常情况</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> k / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newIndex1</span> <span class="operator">=</span> Math.min(index1 + half, length1) - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newIndex2</span> <span class="operator">=</span> Math.min(index2 + half, length2) - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pivot1</span> <span class="operator">=</span> nums1[newIndex1], pivot2 = nums2[newIndex2];</span><br><span class="line">            <span class="keyword">if</span> (pivot1 &lt;= pivot2) {</span><br><span class="line">                k -= (newIndex1 - index1 + <span class="number">1</span>);</span><br><span class="line">                index1 = newIndex1 + <span class="number">1</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                k -= (newIndex2 - index2 + <span class="number">1</span>);</span><br><span class="line">                index2 = newIndex2 + <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">作者：力扣官方题解</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/median-of-two-sorted-arrays/solutions/258842/xun-zhao-liang-ge-you-xu-shu-zu-de-zhong-wei-s-114/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>
              </div>
            </details>
<h1 id="最长回文子串">5. 最长回文子串</h1>
<details class="folding-tag" yellow=""><summary> 难度：中等   </summary>
              <div class="content">
              <ul><li><p>给你一个字符串 s，找到 s 中最长的 回文 子串。</p><ul><li>回文：如果字符串向前和向后读都相同，则它满足 回文性。</li><li>子串：子字符串 是字符串中连续的 非空 字符序列</li></ul></li><li><p>示例 1： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = "babad"</span><br><span class="line">输出："bab"</span><br><span class="line">解释："aba" 同样是符合题意的答案。</span><br></pre></td></tr></table></figure></p></li><li><p>示例 2： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = "cbbd"</span><br><span class="line">输出："bb"</span><br></pre></td></tr></table></figure></p></li><li><p>提示</p><ul><li>1 &lt;= s.length &lt;= 1000</li><li>s 仅由数字和英文字母组成</li></ul></li></ul>
              </div>
            </details>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1L54y1D7pa">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">官方题解视频</div>
            <div class="tag-link-sitename"> https://www.bilibili.com/video/BV1L54y1D7pa</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<h1 id="z字形转换">6. Z字形转换</h1>
<details class="folding-tag" yellow=""><summary> 难度：中等   </summary>
              <div class="content">
              <ul><li><p>将一个给定字符串 s 根据给定的行数 numRows，以从上往下、从左到右进行 Z 字形排列。</p></li><li><p>比如输入字符串为 “PAYPALISHIRING” 行数为 3 时，排列如下：</p><ul><li>P A H N</li><li>A P L S I I G</li><li>Y I R</li></ul></li><li><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：“PAHNAPLSIIGYIR”。</p></li><li><p>请你实现这个将字符串进行指定行数变换的函数：</p><ul><li>string convert(string s, int numRows);</li></ul></li><li><p>示例 1： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = "PAYPALISHIRING", numRows = 3</span><br><span class="line">输出："PAHNAPLSIIGYIR"</span><br></pre></td></tr></table></figure></p></li><li><p>示例 2： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = "PAYPALISHIRING", numRows = 4</span><br><span class="line">输出："PINALSIGYAHRPI"</span><br><span class="line">解释：</span><br><span class="line">P     I    N</span><br><span class="line">A   L S  I G</span><br><span class="line">Y A   H R</span><br><span class="line">P     I</span><br></pre></td></tr></table></figure></p></li><li><p>示例 3： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = "A", numRows = 1</span><br><span class="line">输出："A"</span><br></pre></td></tr></table></figure></p></li><li><p>提示</p><ul><li>1 &lt;= s.length &lt;= 1000</li><li>s 由英文字母（小写和大写）、‘,’ 和 ‘.’ 组成</li><li>1 &lt;= numRows &lt;= 1000</li></ul></li></ul>
              </div>
            </details>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1U34y1q7UN">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Bilibili题解视频</div>
            <div class="tag-link-sitename"> https://www.bilibili.com/video/BV1U34y1q7UN</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<h1 id="整数反转">7. 整数反转</h1>
<details class="folding-tag" yellow=""><summary> 难度：中等   </summary>
              <div class="content">
              <ul><li><p>给你一个 32 位的有符号整数 x ，返回将 x中的数字部分反转后的结果。</p></li><li><p>如果反转后整数超过 32 位的有符号整数的范围 [−2<sup>31</sup>,2<sup>31</sup> − 1] ，就返回 0。</p></li><li><p>假设环境不允许存储 64 位整数（有符号或无符号）。</p></li><li><p>示例 1： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = 123</span><br><span class="line">输出：321</span><br></pre></td></tr></table></figure></p></li><li><p>示例 2： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = -123</span><br><span class="line">输出：-321</span><br></pre></td></tr></table></figure></p></li><li><p>示例 3： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = 120</span><br><span class="line">输出：21</span><br></pre></td></tr></table></figure></p></li><li><p>示例 4： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure></p></li><li><p>提示</p><ul><li>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</li></ul></li></ul>
              </div>
            </details>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1234y1q7XN">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Bilibili题解视频</div>
            <div class="tag-link-sitename"> https://www.bilibili.com/video/BV1234y1q7XN</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<h1 id="字符串转换整数atoi">8. 字符串转换整数（atoi）</h1>
<details class="folding-tag" yellow=""><summary> 难度：中等   </summary>
              <div class="content">
              <ul><li><p>请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32位有符号整数。</p></li><li><p>函数 myAtoi(string s) 的算法如下：</p></li><li><p>空格：读入字符串并丢弃无用的前导空格（” “）</p></li><li><p>符号：检查下一个字符（假设还未到字符末尾）为 ‘-’ 还是‘+’。如果两者都不存在，则假定结果为正。</p></li><li><p>转换：通过跳过前置零来读取该整数，直到遇到非数字字符或到达字符串的结尾。如果没有读取数字，则结果为0。</p></li><li><p>舍入：如果整数数超过 32 位有符号整数范围 [−2<sup>31</sup>,2<sup>31</sup> − 1]，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −2<sup>31</sup>的整数应该被舍入为 −2<sup>31</sup> ，大于 2<sup>31</sup> − 1的整数应该被舍入为 2<sup>31</sup> − 1 。</p></li><li><p>返回整数作为最终结果。</p></li><li><p>示例 1： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = "42"</span><br><span class="line"></span><br><span class="line">输出：42</span><br><span class="line"></span><br><span class="line">解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。</span><br><span class="line"></span><br><span class="line">带下划线线的字符是所读的内容，插入符号是当前读入位置。</span><br><span class="line">第 1 步："42"（当前没有读入字符，因为没有前导空格）</span><br><span class="line">         ^</span><br><span class="line">第 2 步："42"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）</span><br><span class="line">         ^</span><br><span class="line">第 3 步："42"（读入 "42"）</span><br></pre></td></tr></table></figure></p></li><li><p>示例 2： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = " -042"</span><br><span class="line"></span><br><span class="line">输出：-42</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line"></span><br><span class="line">第 1 步："   -042"（读入前导空格，但忽视掉）</span><br><span class="line">            ^</span><br><span class="line">第 2 步："   -042"（读入 '-' 字符，所以结果应该是负数）</span><br><span class="line">             ^</span><br><span class="line">第 3 步："   -042"（读入 "042"，在结果中忽略前导零）</span><br></pre></td></tr></table></figure></p></li><li><p>示例 3： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = "1337c0d3"</span><br><span class="line"></span><br><span class="line">输出：1337</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line"></span><br><span class="line">第 1 步："1337c0d3"（当前没有读入字符，因为没有前导空格）</span><br><span class="line">         ^</span><br><span class="line">第 2 步："1337c0d3"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）</span><br><span class="line">         ^</span><br><span class="line">第 3 步："1337c0d3"（读入 "1337"；由于下一个字符不是一个数字，所以读入停止）</span><br></pre></td></tr></table></figure></p></li><li><p>示例 4： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = "0-1"</span><br><span class="line"></span><br><span class="line">输出：0</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line"></span><br><span class="line">第 1 步："0-1" (当前没有读入字符，因为没有前导空格)</span><br><span class="line">         ^</span><br><span class="line">第 2 步："0-1" (当前没有读入字符，因为这里不存在 '-' 或者 '+')</span><br><span class="line">         ^</span><br><span class="line">第 3 步："0-1" (读入 "0"；由于下一个字符不是一个数字，所以读入停止)</span><br></pre></td></tr></table></figure></p></li><li><p>示例 5： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = "words and 987"</span><br><span class="line"></span><br><span class="line">输出：0</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line"></span><br><span class="line">读取在第一个非数字字符“w”处停止。</span><br></pre></td></tr></table></figure></p></li><li><p>提示</p><ul><li>0 &lt;= s.length &lt;= 200</li><li>s 由英文字母（大写和小写）、数字（0-9）、’ ‘、’+‘、’-’ 和 ‘.’组成</li></ul></li></ul>
              </div>
            </details>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1QR4y1u75y">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Bilibili题解视频</div>
            <div class="tag-link-sitename"> https://www.bilibili.com/video/BV1QR4y1u75y</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
]]></content>
      <categories>
        <category>技术提升</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>架构设计·Java内存模型-JMM</title>
    <url>/2025/03/16/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%C2%B7Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-JMM/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
      <tags>
        <tag>Java内存模型-JMM</tag>
      </tags>
  </entry>
  <entry>
    <title>副业探索 · AI</title>
    <url>/2025/03/01/%E5%89%AF%E4%B8%9A%E6%8E%A2%E7%B4%A2%C2%B7AI/</url>
    <content><![CDATA[<ul>
<li>视频号橱窗：零食，书籍</li>
</ul>
]]></content>
      <categories>
        <category>副业探索</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>架构设计·从架构层面看设计模式</title>
    <url>/2025/03/21/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%C2%B7%E4%BB%8E%E6%9E%B6%E6%9E%84%E5%B1%82%E9%9D%A2%E7%9C%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
      <tags>
        <tag>从架构层面看设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>架构设计·互联网电商系统的演进过程</title>
    <url>/2025/03/15/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%C2%B7%E4%BA%92%E8%81%94%E7%BD%91%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%BC%94%E8%BF%9B%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="电商系统演进">1. 电商系统演进</h1>
<h2 id="发展历程">1.1 发展历程</h2>
<h3 id="萌芽期96-99">1.1.1 萌芽期（96-99）</h3>
<ul>
<li>96年：国家信息化领导小组成立</li>
<li>97年4月：各省成立信息化小组</li>
<li>97年12月：中国化工网B2B上线</li>
<li>98年3月：第一笔互联网交易完成</li>
<li>98年11月：腾讯成立</li>
<li>99年5月：8848网成立</li>
<li>99年8月：易趣网</li>
<li>99年9月：阿里巴巴</li>
<li>99年11月：当当网</li>
</ul>
<h3 id="发展期00-10">1.1.2 发展期（00-10）</h3>
<ul>
<li>00年4月：慧聪网B2B</li>
<li>00年5月：卓越网（现：亚马逊中国）开启B2C模式</li>
<li>00年6月：中国电子商务协会成立</li>
<li>01年：13所高校开启电子商务专业</li>
<li>01年11月：8848暂停电子商务</li>
<li>02年3月：eBay收购易趣33%的股份</li>
<li>02年10月：阿里实现收支平衡</li>
<li>03年5月：淘宝网成立，C2C</li>
<li>03年6月：eBay全盘收购易趣C2C</li>
<li>03年10月：阿里推出支付宝</li>
<li>03年12月：慧聪网香港上市</li>
<li>04年1月：京东涉足电子商务</li>
<li>04年8月：亚马逊收购卓越</li>
<li>05年9月：腾讯推出拍拍网</li>
<li>06年5月：淘宝推出淘宝商城</li>
<li>07年11月：阿里巴巴登陆香港证券市场</li>
<li>08年：经济危机部分严重依赖外贸的电商倒闭</li>
<li>09年6月：当当宣布首季盈利</li>
<li>10年1月：苏宁易购上线</li>
<li>10年11月：国美电器控股库巴购物网进军电子商务</li>
</ul>
<h3 id="稳定期11-至今">1.1.13 稳定期（11-至今）</h3>
<ul>
<li>12年1月：淘宝商城改为天猫</li>
<li>12年3月：唯品会上市</li>
<li>19年：天猫双11交易额2684亿</li>
<li>11年至今：天猫、京东、苏宁、国美、各大电商趋于稳定</li>
</ul>
<h2 id="业务模式">1.2 业务模式</h2>
<ul>
<li>电商早期多以单体业务为主，逐个业务线扩张。系统也多呈现为多个mvc独立运行状态。下面逐个介绍。各个单体的业务模式，以及他们各自的系统运行特点。<br />
</li>
</ul>
<h3 id="b2c">1.2.1 B2C</h3>
<ul>
<li>简介
<ul>
<li>Business to
Consumer（Customer），B2C中的B是Business，意思是企业，2则是to的谐音，C是Customer，意思是消费者，所以B2C是企业对消费者的电子商务模式。这种形式的电子商务一般以网络零售业为主，主要借助于Internet开展在线销售活动。</li>
</ul></li>
<li>系统特点
<ul>
<li>因为面向大量消费者，网站访问量较大，对网站并发行有一定要求，但交易方式相对简单。</li>
</ul></li>
<li>案例
<ul>
<li>天猫商城</li>
<li>京东</li>
<li>苏宁易购</li>
<li>国美电器</li>
</ul></li>
</ul>
<h3 id="c2c">1.2.2 C2C</h3>
<ul>
<li>简介
<ul>
<li>Consumer to Consumer，意思是个人与个人之间的电子商务。 C2C
商务平台就是通过为买卖双方提供一个在线交易平台，使卖方可以主动提供商品上网拍卖，而买方可以自行选择商品进行竞价。比如一个消费者有一台电脑，通过网络进行交易，把它出售给另外一个消费者。</li>
</ul></li>
<li>系统特点
<ul>
<li>同B2C一样，网站访问量是重点。</li>
</ul></li>
<li>案例
<ul>
<li>闲鱼</li>
<li>58交易</li>
</ul></li>
</ul>
<h3 id="b2b">1.2.3 B2B</h3>
<ul>
<li>简介
<ul>
<li>Business to
Business，即企业与企业之间通过互联网进行产品、服务及信息的交换。通俗的说法是指进行电子商务交易的供需双方都是商家（或企业、公司）。一般来讲，过程包括：发布供求信息（现货，期货），订货及确认订货（议价，集采，聚投），支付（先货后款，先款后货，分期支付），票据的签发、传送和接收（验货，验票），确定配送方案（物流），监控配送过程（违约与仲裁）等。</li>
</ul></li>
<li>系统特点
<ul>
<li>与C端用户不同，B端访问量相对小，但是交易周期的流程，以及交易的监督相对复杂。</li>
</ul></li>
<li>案例
<ul>
<li>中国化工</li>
<li>阿里巴巴</li>
<li>慧聪网</li>
<li>中国供销电子商务</li>
<li>中粮我买网</li>
</ul></li>
</ul>
<h3 id="o2o">1.2.4 O2O</h3>
<ul>
<li>简介
<ul>
<li>Online to Offline，O2O
是新兴起的一种电子商务新商业模式，即将线下商务的机会与互联网结合在了一起，让互联网成为线下交易的工具。这样线下服务就可以用线上来引流，消费者可以用线上来筛选服务，还有成交可以在线结算，高效完成部分线下的前期环节。</li>
</ul></li>
<li>系统特点
<ul>
<li>O2O整合了线上购买+线下体验的模式，多为服务性商品，比如餐饮，娱乐等。尤其是移动互联网的接入，对O2O系统就有针对用户做定制化服务的要求，比如位置定位、周边服务、定向推送等。</li>
</ul></li>
<li>案例
<ul>
<li>各类团购</li>
<li>外卖网</li>
<li>打车类</li>
<li>共享单车</li>
</ul></li>
</ul>
<h3 id="其他">1.2.5 其他</h3>
<h4 id="abc">1.2.5.1 ABC</h4>
<ul>
<li>Agent、Business、Consumer。ABC
模式是新型电子商务模式的一种，被誉为继阿里巴巴 B2B 模式、京东商城 B2C
模式以及淘宝 C2C
模式之后电子商务界的第四大模式。它由代理商、商家和消费者共同搭建的集生产、经营、消费为一体的电子商务平台。</li>
<li>案例
<ul>
<li>安居客</li>
</ul></li>
</ul>
<h4 id="b2m">1.2.5.2 B2M</h4>
<ul>
<li>Business to Manager。B2M 相对于 B2B、B2C、C2C
有着本质的不同，其根本的区别在于目标客户群的性质不同，前三者的目标客户群都是作为一种消费者的身份出现，而
B2M
所针对的客户群是该企业或者该产品的销售者或者为其工作者，而不是最终消费者。</li>
<li>案例
<ul>
<li>CRM</li>
<li>OA</li>
</ul></li>
</ul>
<h4 id="m2c">1.2.5.3 M2C</h4>
<ul>
<li>Manager to Consumer。M2C 是针对于 B2M
的电子商务模式而出现的延伸概念。B2M
环节中，企业通过网络平台发布该企业的产品或者服务，职业经理人通过网络获取该企业的产品或者服务信息，并且为该企业提供产品销售或者提供企业服务，企业通过经理人的服务达到销售产品或者获得服务的目的。</li>
</ul>
<h4 id="b2ab2g">1.2.5.4 B2A/B2G</h4>
<ul>
<li>A：Administration，G：Government。是企业与政府管理部门之间的电子商务，如政府采购，海关报税的平台，国税局和地税局报税的平台等。</li>
</ul>
<h4 id="c2ac2g">1.2.5.5 C2A/C2G</h4>
<ul>
<li>Consumer to Administration。
消费者对行政机构的电子商务，指的是政府对个人的电子商务活动。例如政府的税务机构通过指定私营税务，或财务会计事务所用电子方式来为个人报税。</li>
<li>案例
<ul>
<li>个税APP</li>
</ul></li>
</ul>
<h2 id="电商中台">1.3 电商中台</h2>
<h3 id="背景">1.3.1 背景</h3>
<h4 id="技术架构的需要">1.3.1.1 技术架构的需要</h4>
<ul>
<li>烟囱式系统建设：业务部门提出业务需求，信息中心部门进行系统集成，再进入到需求收集、需求分析、开发、测试、上线的项目周期中。每个新系统的上线都预示着一座新的烟囱矗立而成。这种完全基于业务需求建设系统的方式，已经成为过去20多年企业建设IT系统的标准流程，导致IT系统建设早的企业内部系统烟囱林立。</li>
<li>造成的问题：
<ul>
<li>重复功能建设和维护带来的重复投资</li>
<li>系统间的集成和协作成本高昂</li>
<li>不利于业务的沉淀和持续发展。</li>
</ul></li>
</ul>
<h4 id="组织架构的需要">1.3.1.2 组织架构的需要</h4>
<ul>
<li>IT信息部门在现有模式下往往被定位成了一个服务部门。
这使得IT信息化部门一直处于『业务支持』的职能位置，即只为了满足业务部门需求而进行IT系统建设的实施和运维部门。这种模式下，
很多企业的IT信息化部门的员工大多数的工作内容都是开发上线开发上线。而对业务缺乏某一专业领域的经验和沉淀。基于中台下的共享业务技术部，使得核心公共业务沉淀，让IT部门与上层业务更贴近，能够对业务
的下一步发展有着自己的理解和看法，对业务流程如何进一步优化能更好地提升业务，甚至对企业现有的业务提出创新的想法，为企业带来新的业务增长点。</li>
</ul>
<h3 id="概述">1.3.2 概述</h3>
<ul>
<li>综合前面的业务模式，各个业务类型中，都具备基本的商品、交易、库存、支付等公共部分。提炼这部分基础内容，进行沉淀，逐步形成中台基础能力层，而个性化的业务流程部分上浮，形成产品层。这样做的好处是，基础能力层聚焦于稳定收敛的业务模型和基础服务本身，不会随着业务和前台产品的调整发生大的变化，平台产品层则专注于通过流程编排类的技术手段，将基础能力构建成业务的解决方案，解决共性和个性化的问题。即大中台，小前端。</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-15_17-23-48.png"/></div></div>
<h3 id="业务中台">1.3.3 业务中台</h3>
<ul>
<li>商品中心：商品、类目、sku、spu</li>
<li>交易中心：订单、状态流转、条目、支付</li>
<li>营销中心：促销、优惠券、活动</li>
<li>会员中心：账户、基本信息、收发货地址、商铺商家信息</li>
<li>仓储中心：仓库、库存</li>
<li>物流中心：发货信息、自主物流或外部物流对接</li>
</ul>
<h3 id="技术中台">1.3.4 技术中台</h3>
<ul>
<li>基础架构：核心类库、公共框架、基础服务、服务治理框架</li>
<li>中间件：分布式缓存、分布式消息、数据存储（db，nosql）、分布式文件,分布式调度</li>
<li>自动化运维：监控中心、资源管理、配置中心、发布中心、日志平台</li>
<li>自动化测试：任务协同、基础测试、性能测试、接口测试、持续集成</li>
</ul>
<h3 id="数据中台">1.3.5 数据中台</h3>
<ul>
<li>数据抽取：从db，nosql，日志等各个来源提供抽取接口</li>
<li>数据接口：为上层业务提供需要的定制化业务数据接口</li>
<li>数据分析：行业分析与决策、数据驱动运营</li>
<li>人工智能：用户画像、商品推荐</li>
<li>可视化：数据大屏、信息展示、活动报表</li>
</ul>
<h2 id="发展趋势">1.4 发展趋势</h2>
<h3 id="移动电商">1.4.1 移动电商</h3>
<ul>
<li>移动电子商务（M-Commerce），它由电子商务（E-Commerce）的概念衍生出来，传统电子商务以PC机为主要界面，是“有线的电子商务”；而移动电子商务，则是通过智能手机、平板电脑这些可以装在口袋里的终端与我们谋面，无论何时、何地都可以开始。有人预言，移动商务将决定21世纪新企业的风
貌，也将改变生活与旧商业的地形地貌。</li>
<li>主要特点：随时随地、实时在线、精准推送营销</li>
<li>面临挑战：终端的多样化</li>
</ul>
<h3 id="社交电商">1.4.2 社交电商</h3>
<ul>
<li>电商说到底就是通过线上流量把货卖出去。社交电商顾名思义，与传统电商网站的区别在于流量的导入方式是借助社交圈。社交电商，一般通过点赞、分享、转发、自媒体推荐等通过自己的社会关系
去制造和产生流量。而传统电商是做平台，借助平台的力量去助推销售。</li>
<li>传统电商以货为中心，围绕商品、供应链的传统卖货平台。</li>
<li>社交电商以人为中心，是社交关系形成的电商形态，不以产品搜索、展示为销售模式，而是通过社交，</li>
<li>用户分享传播，形成口碑效应，从而激发消费需求。</li>
<li>拼多多历经短短2年3个月的时间就在美国纳斯达克正式上市，而这个成绩，淘宝用了10年，京东用了5年。</li>
<li>案例：拼多多、有赞、微商、抖音、淘宝直播</li>
<li>特点：容易形成圈子效应</li>
<li>面临挑战：对口碑的要求很高、社交和交易的界限不好把控</li>
</ul>
<h3 id="新零售">1.4.3 新零售</h3>
<ul>
<li>新零售，英文是New
Retailing，在2016年的10月，马云提出了新零售就是线上、线下、物流相结合。即个人、企业以互联网为依托，通过运用大数据、人工智能等先进技术手段，对商品的生产、流通与销售过程进行升级改造，进而重塑业态结构与生态圈，并对线上服务、线下体验以及现代物流进行深度融合的零售新模式。</li>
<li>在线上零售的冲击下，传统的纯线下零售在历经了地产整合、渠道升级、品牌崛起等发展阶段后，很难有新突破。而线上零售也逐渐探到传统流量模式的天花板。于是线上、线下、技术、数据、供应链等场景都在寻求相互融合，形成线上交易结合线下体验店的新零售。</li>
<li>案例：阿里巴巴全面布局”新零售”市场；京东主推”无界零售”；苏宁则依靠”智慧零售”
迎来九年来最佳业绩</li>
</ul>
<h1 id="架构体系演进">2. 架构体系演进</h1>
<h2 id="概述-1">2.1 概述</h2>
<ul>
<li>任何体系的成型不是一蹴而就，随着访问量，数据量的增长，业务需求在推动技术架构的发展变革。下面我们以淘宝的发展历程为例，来看系统架构的演进过程。</li>
<li>1）架构目标
<ul>
<li>高性能：提供快速的访问体验，高并发下的及时响应。</li>
<li>高可用：网站服务7x24正常访问，可用性达到几个9。</li>
<li>可伸缩：资源的扩容，应对突发和流量脉冲。</li>
<li>安全性：提供网站安全访问和数据加密、安全存储等策略。</li>
<li>扩展性：方便对现有模块做版本升级，新模块的上线，突发活动下的服务降级。</li>
<li>敏捷性：对系统突发情况的快速排查与应对。</li>
</ul></li>
<li>2）演进概述
<ul>
<li>部署层面：单机到集群，集中式到分布式，物理部署到云化</li>
<li>业务层面：单一mvc到垂直拆分，服务治理到微服务</li>
<li>数据层面：db到集群，单一关系型数据到多样化nosql，搜索引擎，文件服务</li>
</ul></li>
</ul>
<h2 id="单机器时代">2.2 单机器时代</h2>
<ul>
<li>小型网站，阿里云小项目还有人在用。</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-15_18-56-50.png"/></div></div>
<ul>
<li>1）方案
<ul>
<li>大型机：引发对单机性能的过度追求，推动高配机器的发展，成本高昂</li>
<li>调优：jvm单节点调优甚至接近于强迫症的地步</li>
</ul></li>
<li>2）特点
<ul>
<li>部署简单：采用web包部署与发布，db同台机器连接，简单易操作。</li>
<li>资源争夺：在业务发展的初始阶段尚可支撑，随着访问量的上升，单机性能很快会成为系统瓶颈。</li>
</ul></li>
</ul>
<h2 id="数据分离">2.3 数据分离</h2>
<ul>
<li>稍微大一点的系统，dba出现，数据库追逐商业大型db如oracle，如（淘宝v1.1
， mysql→oracle）</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-15_18-58-10.png"/></div></div>
<ul>
<li>1）方案
<ul>
<li>多台机器：tomcat与mysql各自独占机器资源</li>
<li>针对性扩容：tomcat应用机更注重cpu的运算和内存，mysql更注重io与磁盘性能，针对各自情况扩容</li>
</ul></li>
<li>2）特点
<ul>
<li>数据维护：可以抽出单独的dba来维护数据库服务器</li>
<li>数据安全：需要跨机器访问数据库，链接密码需要注意防范泄漏</li>
<li>数据库瓶颈：数据库频繁读写，io很快成为瓶颈</li>
</ul></li>
</ul>
<h2 id="数据缓存">2.4 数据缓存</h2>
<ul>
<li>2006-2007，淘宝V2.2架构，分布式缓存Tair引入。（08-09创业初期memcache+ssh1时代的故事）</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-15_18-59-26.png"/></div></div>
<ul>
<li>1）方案
<ul>
<li>数据冷热划分：热点数据如类目、商品基础信息热加载，其他数据延迟加载</li>
<li>ehcache：非分布式，简单，易维护，可用性一般</li>
<li>memcache：性能可靠，纯内存，客户端需要自己实现，无持久化</li>
<li>redis：性能可靠，纯内存，自带分片，集群，哨兵，支持持久化，几乎成为当前的标准方案</li>
</ul></li>
<li>2）特点
<ul>
<li>缓存策略：缓存与db的边界需要架构师去把控，重度依赖可能引发问题（memcache造成db高压案例，模拟请求解决
→ squid；redis短信平台故障案例）</li>
<li>缓存陷阱：击穿，穿透，雪崩</li>
<li>数据一致性：删除、双写</li>
</ul></li>
</ul>
<h2 id="应用集群">2.5 应用集群</h2>
<ul>
<li>2004-2005，淘宝V2.0，EJB为核心（2011年间EJB3 pk
spring3.x选型案例）。V2.1架构下，引入spring框架走向轻量化和集群</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-15_19-01-23.png"/></div></div>
<ul>
<li>1）方案
<ul>
<li>apache：早期负载均衡方案，性能一般</li>
<li>nginx：7层代理，性能强悍，配置简洁，可以携带lua完成前端逻辑，当前不二之选</li>
<li>haproxy：性能没问题，可做7层或4层代理。</li>
<li>lvs：4层代理，性能最强，linux集成，配置麻烦</li>
<li>h5：硬件负载，财大气粗的不二选择</li>
</ul></li>
<li>2）特点</li>
<li>session保持：集群环境下，用户登陆及session的保持成为问题，需要分布式session做支撑</li>
<li>分布式协同：分布式环境下对资源的加锁要超出线程锁的范畴，上升为分布式锁</li>
<li>调度问题：调度程序跑重复</li>
<li>机器状态管理：多台应用机的状态检测与替换需要做到及时性</li>
<li>服务升级：滚动升级成为可能</li>
<li>日志管理：日志文件分散在各个机器，促进集中式日志平台的产生</li>
</ul>
<h2 id="读写分离">2.6 读写分离</h2>
<ul>
<li>早在2003-2004淘宝V1.0就使用mysql就使用了读写分离，V1.1换成oracle，直到2007数据库重新往mysql回迁，新东方也是相同经历。</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-15_19-08-51.png"/></div></div>
<ul>
<li>1）方案
<ul>
<li>缓存集群：redis哨兵，集群，分片，pre-sharding，memcache一致性hash</li>
<li>数据库集群：一主多从、双主单写、灾备 （供销灾备双主单写案例）</li>
</ul></li>
<li>2）特点
<ul>
<li>数据延迟：准实时，单方法内的写入立即读取问题</li>
<li>开发层面：需要开发框架具备多数据源的支持，以及自动化的数据源切换</li>
<li>数据分片：memcache需要客户端处理，redis支持集群数据分片</li>
<li>单库瓶颈：业务越来越多，表数量越来越多。单库成为瓶颈</li>
<li>数据局限：依然无法解决单表大数据的问题，比如订单积累达到亿级，即使在从库，关联查询依然奇慢无比</li>
</ul></li>
</ul>
<h2 id="分库分表">2.7 分库分表</h2>
<ul>
<li>2004-2007，淘宝V2.1，支持分库，抛弃EJB。</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-15_19-10-14.png"/></div></div>
<ul>
<li>1）方案
<ul>
<li>早期分区表：range，list，hash，key，对开发端透明，但分区数有限制，性能提升有天花板。</li>
<li>业务分库：订单库，产品库，活动库，会员库</li>
<li>横向分表：3个月内订单，半年内订单，更多订单</li>
</ul></li>
<li>2）特点
<ul>
<li>（恒天集团基金系统从数据库分区表到Mycat）</li>
<li>分库：无法使用数据库事务保证完整性，而分布式事务的效果并不理想，多采用幂等和最终一致性方案。</li>
<li>分表：数据聚合矛盾，以订单为例，下单时间维度的分表和用户维度的查询是一对矛盾。排序统计变得异常困难。</li>
<li>中间件：Sharding-JDBC，Mycat，Atlas</li>
</ul></li>
</ul>
<h2 id="动静分离">2.8 动静分离</h2>
<ul>
<li>早年间的Apache+tomcat，后被nginx几乎一统江山。（前后端开发模式的演进：mvc页面嵌套→接口化）</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-15_19-12-15.png"/></div></div>
<ul>
<li>1）方案
<ul>
<li>静态响应：tomcat对静态文件响应一般，提取静态文件，直接由nginx响应</li>
<li>动态代理：后端api通过代理转发给tomcat应用机器</li>
</ul></li>
<li>2）特点
<ul>
<li>开发层面调整：项目结构要同步调整，由原来的一体化mvc转换为后端api+前端形式。</li>
<li>前后协调：前后端的分工变得更明确，互相并行开发，独立部署，但也带来了接口协调与约定等沟通问题</li>
<li>单层局限：单个nginx代理在并发处理任务时，依然会有上限，静态文件节点需要面临扩容。</li>
</ul></li>
</ul>
<h2 id="多层代理">2.9 多层代理</h2>
<ul>
<li>2010-2012
，新东方网络课堂项目架构，基于springMVC+Mybatis，war包集中式部署。资源不够，机器来凑的时代（30台tomcat）。</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-15_19-13-43.png"/></div></div>
<ul>
<li>1）方案
<ul>
<li>多层代理：在nginx前再加一层lvs做代理，作为流量的统一入口，再分发给下层的多个nginx，静态服务得到扩容</li>
</ul></li>
<li>2）特点
<ul>
<li>机房受限：lvs依然是单一节点，即使keepalived做到高可用，流量仍然需要在唯一入口进入。</li>
</ul></li>
</ul>
<h2 id="跨机房">2.10 跨机房</h2>
<ul>
<li>淘宝V2.1时代 ，
使用自己的TaobaoCDN。中国供销集团两地灾备，DNS轮询北京机房，西安机房</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-15_19-15-05.png"/></div></div>
<ul>
<li>1）方案
<ul>
<li>dns轮询：通过配置多个ip将服务部署到多个机房，通过dns的策略轮询调用，可以实现机房层面的扩容</li>
<li>CDN：就近原则，使用户获得就近的机房访问相关资源，自己投资太大，购买他方需要付费。</li>
</ul></li>
<li>2）特点
<ul>
<li>基本解决了机器部署的扩容问题，随着业务的发展，数据呈现多样化发展，底层异构化数据成为新的瓶颈。</li>
</ul></li>
</ul>
<h2 id="异构数据">2.11 异构数据</h2>
<ul>
<li>2006-2007，淘宝V2.2，分布式存储TFS，分布式缓存Tair，V3.0 加入 nosql
Cassandra，搜索引擎升级</li>
<li>数据库查询调优极限→搜索引擎、本地上传+nfs→文件系统的演进，方案后期均有深入讲解</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-15_19-16-23.png"/></div></div>
<ul>
<li>1）方案
<ul>
<li>nosql：商品特殊化属性，mongodb，hbase</li>
<li>搜索引擎：商品信息库，lucene，solr，elasticsearch</li>
<li>分布式文件存储：商品图片，上传的文件等，hdfs，fastdfs</li>
</ul></li>
<li>2）特点
<ul>
<li>开发框架支持：存储的数据多样化，要求开发框架架构层面要提供多样化的支撑，并确保访问易用性</li>
<li>数据运维：多种数据服务器对运维的要求提升，机器的数据维护与灾备工作量加大</li>
<li>数据安全：多种数据存储的权限，授权与访问隔离需要注意</li>
</ul></li>
</ul>
<h2 id="业务线拆分">2.12 业务线拆分</h2>
<ul>
<li>以上架构的演进，基础设施层面的优化几乎达到了天花板，接下来，需要从业务和应用层面进行架构上的升级</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-15_19-17-38.png"/></div></div>
<ul>
<li>1）方案
<ul>
<li>业务分发：代理层设置不同的二级域名，如b2b.abc.com，b2c.abc.com，分发给不同的服务器</li>
<li>消息互通：服务之间使用mq等异步消息提供通讯。</li>
<li>跨域问题：因为多个业务线占据不同的域名，出现多个主站，单点登录被推上前线</li>
</ul></li>
<li>2）特点
<ul>
<li>粒度较粗：纯以业务为导向，往往形成业务团队各自为战，新业务线出现时疯狂扩张</li>
<li>重复开发：相同功能可能在不同业务的项目中被重复开发，比如促销、短信发送、收银台</li>
</ul></li>
</ul>
<h2 id="服务化">2.13 服务化</h2>
<ul>
<li>淘宝V3.0，HSF出现，服务化导向，架构师忙于SOA和系统关系的梳理。</li>
<li>（2015年冬金融项目业务线rest→dubbo2.4.11的引入过程）</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-15_19-18-53.png"/></div></div>
<ul>
<li>1）方案
<ul>
<li>公共服务：重复开发的基础服务沉淀，形成服务中心，避免重复造轮子，降低成本，架构团队出现。</li>
<li>独立性：各自服务独立部署升级，粒度更细，低耦合，高内聚</li>
<li>SOA：服务治理的范畴，重在服务之间的拆分与统一接口</li>
<li>微服务：可以理解为服务治理的一种手段，趋向于小服务的独立运作与部署。</li>
<li>技术手段：springcloud，dubbo</li>
</ul></li>
<li>2）特点
<ul>
<li>界限把控：服务的粒度、拆分和公共服务提炼需要架构师的全局把控。设计不好容易引发混乱</li>
<li>部署升级：服务数量增多，自动化部署面临挑战</li>
<li>服务可用性：抽调的微服务因需要被多个上层业务共享，可用性等级变高，一旦down机就是灾难</li>
<li>熔断和限流：做好服务熔断和限流，提防服务单点瓶颈造成整个系统瘫痪。</li>
</ul></li>
</ul>
<h2 id="中台化">2.14 中台化</h2>
<ul>
<li>阿里共享业务技术部的发展，中国供销集团，电商平台中台体系的架构模式。</li>
<li>技术沉积形成了公共服务平台，业务沉积逐步形成共享业务技术部，同时，业务烟囱的壁垒推动业务中台成型。同时组织结构同步升级，以技术共享为核心的技术中台，以数据为中心的数据中台同步建设得到实施。</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-15_19-20-25.png"/></div></div>
<ul>
<li>1）方案
<ul>
<li>业务沉淀形成独立的中心，各个中心之间借助服务总线实现业务协作与服务重组。</li>
</ul></li>
<li>2）特点
<ul>
<li>团队规模：团队规模扩张，人员增多，协调成本上升，组织机构要有配套调整</li>
<li>接口授权：各个中心的接口授权与开发需要把控</li>
<li>接口约束：系统增多，各个服务接口的规范化日益重要，要求有统一的服务接口规范，推动企业消息总线的建设</li>
<li>跨服务令牌：借助oauth2等手段，实现服务之间的权限认证</li>
</ul></li>
</ul>
<h2 id="容器化">2.15 容器化</h2>
<ul>
<li>针对中台化的建设及微服务数量的飙升，部署和运维支撑同步进行着变革。面临微服务的快速部署，资源的弹性伸缩等挑战，容器化与云被推进。</li>
<li>案例：成百上千的服务数量庞大、大促期间某些微服务的临时扩容。</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-15_19-21-43.png"/></div></div>
<ul>
<li>1）方案
<ul>
<li>虚拟化：vm方案，Openstack，Vmware，VirtualBox</li>
<li>容器化：docker</li>
<li>编排：swarm，k8s，k3s</li>
<li>云化：容器化解决了资源的快速伸缩，但仍需要企业自备大量预备资源。推动私有云到企业云进化</li>
</ul></li>
<li>2）特点
<ul>
<li>资源预估：注意资源的回收，降低资源闲置和浪费，例如大促结束后要及时回收。</li>
<li>运维要求：需要运维层面的高度支撑，门槛比较高</li>
<li>预估风险：云瘫痪的故障造成的损失不可估量，（openstack垮掉的事故案例）</li>
</ul></li>
</ul>
<h1 id="架构总结">3. 架构总结</h1>
<ol type="1">
<li>知行合一，做之前，先考虑意义</li>
<li>原生优于定制，约定大于配置</li>
<li>什么都是，最后会沦落到什么都不是</li>
<li>控制技术欲，不要瞎折腾</li>
<li>留下扩展，但不要想到100年后</li>
<li>没有最好的，只有最合适的</li>
<li>够用就好，玩的越花，风险越大</li>
<li>简约最美</li>
</ol>
]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
      <tags>
        <tag>互联网电商系统的演进过程</tag>
      </tags>
  </entry>
  <entry>
    <title>环境安装 · Docker</title>
    <url>/2025/03/21/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%C2%B7Docker/</url>
    <content><![CDATA[<h1 id="linux系统安装docker">1. Linux系统安装Docker</h1>
<p>环境安装：</p>
<blockquote>
<p>yum -y install gcc-c++</p>
</blockquote>
<p>第一步：安装必要的一些系统工具</p>
<blockquote>
<p>yum install -y yum-utils device-mapper-persistent-data lvm2</p>
</blockquote>
<p>第二步：添加软件源信息</p>
<blockquote>
<p>yum-config-manager –add-repo <a
href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo"
title="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p>
</blockquote>
<p>第三步：更新并安装Docker-CE</p>
<blockquote>
<p>yum makecache fast yum -y install docker-ce</p>
</blockquote>
<p>第四步：开启Docker服务</p>
<blockquote>
<p>service docker start systemctl enable docker</p>
</blockquote>
<p>第五步：测试是否安装成功</p>
<blockquote>
<p>docker -v</p>
</blockquote>
<p>第六步：配置镜像加速器</p>
<p>您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>
<blockquote>
<p>sudo mkdir -p /etc/docker</p>
</blockquote>
<p>新建daemon.json文件内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>:[<span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,<span class="string">&quot;http://hubmirror.c.163.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果以上镜像不能使用了，可以使用阿里云的镜像！ <a
href="https://help.aliyun.com/document_detail/60750.html?spm=a2c4g.60743.0.i1">官方镜像加速
(aliyun.com)</a></p>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/docker001.png"/></div></div>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;:[&quot;https://q0awbeqk.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>sudo systemctl daemon-reload sudo systemctl daemon-reload sudo
systemctl restart docker</p>
</blockquote>
]]></content>
      <categories>
        <category>环境安装</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>架构设计·电商系统在双11大促活动下的架构体系</title>
    <url>/2025/03/16/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%C2%B7%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F%E5%9C%A8%E5%8F%8C11%E5%A4%A7%E4%BF%83%E6%B4%BB%E5%8A%A8%E4%B8%8B%E7%9A%84%E6%9E%B6%E6%9E%84%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<h1 id="背景与挑战">1. 背景与挑战</h1>
<h2 id="背景介绍">1.1 背景介绍</h2>
<h3 id="课程概述">1.1.1 课程概述</h3>
<ul>
<li>了解双11 的历程</li>
<li>学习当前主流的电商系统架构体系</li>
<li>了解大促对电商系统的一些挑战</li>
<li>面对大促活动，站在架构师角度思考，可能有哪些问题，如何应对</li>
</ul>
<h3 id="双11历程">1.1.2 双11历程</h3>
<ul>
<li>起于2009年，刚开始的双十一还并不出名，电商开展促销月都是以各自的店庆月作为基础的。国美在线是4月份，京东6月份，易购8月份，而淘宝商城选择了双十一作为促销月。促销的初衷是光棍节(11月11日)大家没事干，就该买点啥东西去当礼物送人。于是乎，双11就这样诞生了。
<ul>
<li>2009年 销售额0.52亿，27家品牌参与;</li>
<li>2010年 销售额9.36亿，711家品牌参与；</li>
<li>2011年 销售额33.6亿，2200家品牌参与；</li>
<li>2012年 销售额132亿，10000家品牌参与；</li>
<li>2013年 销售额352亿，20000家品牌参与；</li>
<li>2014年 销售额571亿，27000家品牌参与；</li>
<li>2015年 销售额912亿，40000家品牌参与；</li>
<li>2016年 销售额1207亿，98000家品牌参与；</li>
<li>2017年 销售额1682亿，140000家品牌参与；</li>
<li>2018年 销售额2135亿，180000家品牌参与；</li>
<li>截止到2019年11日23时59分59秒 销售额2684亿。</li>
</ul></li>
<li>了解双11背景下电商公司的应对措施，有助于提升高访问量背景下的系统架构知识。</li>
</ul>
<h2 id="电商整体架构">1.2 电商整体架构</h2>
<h3 id="概述">1.2.1 概述</h3>
<ul>
<li>从组织架构到技术架构，当前各大电商系统基本趋于中台化。中台在2015由阿里提出，其实是一种企业架构而不是单纯的技术层面，目前几乎各大电商都进行着中台化的建设。</li>
<li>中台没有什么神秘的，说到底，中台就是对 ”共享“
理念系统化的归纳和总结。
<ul>
<li>重复功能建设和维护带来的重复投资</li>
<li>烟囱式建设造成系统壁垒，数据孤岛</li>
<li>业务沉淀促进可持续发展</li>
<li>大中台小前台快速响应市场的需要</li>
</ul></li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-15_17-23-48.png"/></div></div>
<h3 id="上层中台">1.2.2 上层中台</h3>
<ul>
<li>即大中台，小前台的前台，电商中直面用户的B2B,B2C等各个业务线。</li>
</ul>
<h3 id="业务中台">1.2.3 业务中台</h3>
<ul>
<li>业务中台基于公共服务的沉淀，需要收敛一些基础的业务服务，如商品、订单、会员、库存、财务、结算等等。</li>
</ul>
<h3 id="数据中台">1.2.4 数据中台</h3>
<ul>
<li>数据中台不是一个平台，也不是一个系统。数据仓库、数据平台和数据中台是有区别的。简单的举例：数据平台可以理解为数据库，数据仓库类比为报表，而数据中台更贴近上层业务，带着业务属性。</li>
</ul>
<h3 id="技术中台">1.2.5 技术中台</h3>
<ul>
<li>与业务无关的基础沉淀，中间件，系统框架，监控，日志，集成部署等等</li>
</ul>
<h3 id="运维中台">1.2.6 运维中台</h3>
<ul>
<li>不一定存在，系统运维相关的内容，硬件，机房，包括企业云平台的建设等可以划分为单独的运维中台</li>
</ul>
<h2 id="面临挑战">1.3 面临挑战</h2>
<h3 id="考量维度">1.3.1 考量维度</h3>
<p>（根据项目情况有所偏重，例如分布式与一致性是一对矛盾） *
高性能：提供快速的访问体验。 * 高可用：网站服务7<em>24正常访问。 </em>
可伸缩：硬件弹性增加/减少能力（快速扩容与释放）。 *
扩展性：方便地增加/减少新的功能/模块（迭代与服务降级）。 *
安全性：安全访问和数据加密、安全存储等策略。 *
敏捷性：快速应对突发情况的能力（灾备等）。</p>
<h3 id="内部瓶颈">1.3.2 内部瓶颈</h3>
<ul>
<li>木桶效应：水管最细的地方决定流量，水桶最低的地方决定容量（QPS压测调优为例）</li>
<li>CPU：序列化和反序列化、高频日志输出、大量反射、大量线程的应用</li>
<li>内存：使用内存的中间件或服务，如redis，memcache，jvm大量对象堆积内存的应用等</li>
<li>网络带宽：大流量高并发环境下，双11用户访问量激增，造成网络拥堵</li>
<li>磁盘IO：文件上传下载，数据库频繁读写，不合理或大批量的日志输出</li>
<li>数据库连接数：应对双11，应用服务器连接池大批扩容，警惕底层数据库、Redis等连接数瓶颈</li>
</ul>
<h3 id="外部服务">1.3.3 外部服务</h3>
<ul>
<li>短信：外部短信延迟与送达率问题，可以搭建短信平台，多家渠道做路由和切换分流（短信平台架构？）</li>
<li>支付：银行支付与回调延迟，搭建支付中心，对接多支付渠道</li>
<li>快递对接：快递服务对接（快递100）</li>
<li>外部云存储：云存储文件访问，流量扩容（大家所使用的存储？nfs的架构与事故）</li>
<li>CDN：外部静态文件访问提速服务（使用过的项目？）</li>
</ul>
<h1 id="应对措施">2. 应对措施</h1>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-16_11-44-13.png"/></div></div>
<h2 id="业务中台-1">2.1 业务中台</h2>
<h3 id="订单中心">2.1.1 订单中心</h3>
<h4 id="异步化">2.1.1.1 异步化</h4>
<ul>
<li><p>（大家使用过的mq？遇到的问题？）</p></li>
<li><p>场景：</p>
<ul>
<li>大促期间新增许多需要获取订单状态的服务，比如应对双11而临时增加的数据中台订单大屏展示等</li>
</ul></li>
<li><p>解决：</p>
<ul>
<li>异步化，并对消息队列调优，多队列分流</li>
</ul></li>
<li><p>问题：</p>
<ul>
<li>注意异步化引发的乱序问题，一是传输阶段，二是消费阶段</li>
</ul></li>
<li><p>图解：</p>
<ul>
<li>rabbitmq传输：队列级别顺序保障，单消费者消费一个队列可以严格保障顺序性，需要扩充队列数提升性能</li>
</ul>
<p><div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-16_11-45-52.png"/></div></div></p>
<ul>
<li>kafka传输：分区级别顺序保障，只能保障投放和传输阶段的顺序性</li>
</ul>
<p><div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-16_11-46-20.png"/></div></div></p>
<ul>
<li>consumer：1对1消费存在性能问题，接收消息后对key做二次分发，放入多个内存队列，开启多线程消费</li>
</ul></li>
</ul>
<h4 id="过期订单">2.1.1.2 过期订单</h4>
<ul>
<li>（场景及思考，如果让你做架构设计有什么方案？这些方案有什么优缺点）</li>
<li>双11抢单是最常见的场景，抢单不支付会占据大批量资源，如商品库存。如何取消过期订单是架构师必须面对的问题。主要有以下几种方案：</li>
<li>扫表实现
<ul>
<li>原理：
<ul>
<li>通过定时任务轮询扫描订单表，超时的批量修改状态</li>
</ul></li>
<li>优点：
<ul>
<li>实现非常简单</li>
</ul></li>
<li>缺点:
<ul>
<li>大量数据集，对服务器内存消耗大。</li>
<li>数据库频繁查询，订单量大的情况下，IO是瓶颈。</li>
<li>存在延迟，间隔短则耗资源，间隔长则时效性差，两者是一对矛盾。</li>
<li>不易控制，随着定时业务的增多和细化，每个业务都要对订单重复扫描，引发查询浪费</li>
</ul></li>
</ul></li>
<li>java延迟队列实现
<ul>
<li><p>原理：</p>
<ul>
<li>通过DelayQueue，每下一单，放入一个订单元素并实现getDelay()方法，方法返回该元素距离失效还剩余的时间，当&lt;=0时元素就失效，就可以从队列中获取到。启用线程池对数据监听，一旦捕获失效订单，取出之后，调用取消逻辑进行处理。</li>
</ul>
<p><div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-16_11-48-53.png"/></div></div></p></li>
<li><p>优点:</p>
<ul>
<li>基于jvm内存，效率高，任务触发时间延迟低。</li>
</ul></li>
<li><p>缺点:</p>
<ul>
<li>存在jvm内存中，服务器重启后，数据全部丢失。</li>
<li>依赖代码硬编码，集群扩展麻烦</li>
<li>依赖jvm内存，如果订单量过大，无界队列内容扩充，容易出现OOM</li>
<li>需要代码实现，多线程处理业务，复杂度较高</li>
<li>多线程处理时，数据频繁触发等待和唤醒，多了无谓的竞争</li>
</ul></li>
</ul></li>
<li>消息队列实现
<ul>
<li>原理：
<ul>
<li>设置两个队列，每下一单放一条进延迟队列，设定过期时间。消息一旦过期，获取并放入工作队列，由consumer获取，唤起超时处理逻辑</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-16_11-50-40.png"/></div></div>
<ul>
<li>如果采用的是RabbitMQ，其本身没有直接支持延迟队列功能，可以针对Queue和Message设置
x-message-ttl，用消息的生存时间，和死信队列来实现，具体有两种手段， A:
通过队列属性设置，队列中所有消息都有相同的过期时间，粗粒度，编码简单 B:
对消息进行单独设置，每条消息TTL可以不同，细粒度，但编码稍微复杂。</li>
</ul></li>
<li>优点：
<ul>
<li>可以随时在队列移除，实现实时取消订单，及时恢复订单占用的资源（如商品）消息存储在mq中，不占用应用服务器资源异步化处理，一旦处理能力不足，consumer集群可以很方便的扩容</li>
</ul></li>
<li>缺点：
<ul>
<li>可能会导致消息大量堆积</li>
<li>mq服务器一旦故障重启后，持久化的队列过期时间会被重新计算，造成精度不足</li>
<li>死信消息可能会导致监控系统频繁预警</li>
</ul></li>
</ul></li>
<li>redis实现
<ul>
<li>原理：
<ul>
<li>利用redis的notify-keyspace-events，该选项默认为空，改为Ex开启过期事件，配置消息监听。每下一单在redis中放置一个key（如订单id），并设置过期时间。</li>
</ul></li>
<li>优点:
<ul>
<li>消息都存储在Redis中，不占用应用内存。</li>
<li>外部redis存储，应用down机不会丢失数据。</li>
<li>做集群扩展相当方便</li>
<li>依赖redis超时，时间准确度高</li>
</ul></li>
<li>缺点:
<ul>
<li>订单量大时，每一单都要存储redis内存，需要大量redis服务器资源</li>
</ul></li>
</ul></li>
<li>被动取消
<ul>
<li>原理：
<ul>
<li>在每次用户查询订单的时候，判断订单时间，超时则同时完成订单取消业务。</li>
</ul></li>
<li>优点：
<ul>
<li>实现极其简单</li>
<li>不会有额外的性能付出</li>
<li>不依赖任何外部中间件，只是应用逻辑的处理</li>
</ul></li>
<li>缺点：
<ul>
<li>延迟度不可控，如果用户一直没触发查询，则订单一直挂着，既不支付也未取消，库存也就被占着</li>
</ul></li>
</ul></li>
</ul>
<h3 id="支付中心">2.1.2 支付中心</h3>
<ul>
<li>支付交互流程，支付系统设计偏重，关于做过的那些支付系统2014与2018的架构变化，政策的变动？</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-16_11-54-08.png"/></div></div>
<h4 id="重复支付">2.1.2.1 重复支付</h4>
<p>（2018重复支付事故）</p>
<ul>
<li>原因：
<ul>
<li>在第一步发起的时候，用户进入支付方式选择页。选第一个支付方式并支付完后因为通知延迟，以为支付失败。在支付又选了第二种，再次支付。</li>
</ul></li>
<li>应对方案：
<ul>
<li>程序屏蔽，前端js触发按钮置灰或者遮罩提示（支付成功？遇到问题？），或者在支付方式选择页直接跳转。</li>
<li>后端处理，发现不同通道下的支付成功回调，抛消息队列或记录日志。</li>
</ul></li>
<li>数据修复：
<ul>
<li>首先查支付日志，确认针对同一笔订单收到了不同支付渠道的回调。</li>
<li>其次，在支付平台管理后端可以查到入账记录，人工介入。</li>
<li>最后对账阶段会发现对方多帐，我方补单时出现重复订单。</li>
</ul></li>
<li>问题处理：
<ul>
<li>调取退款接口或者在支付渠道的管理后台操作退款（一定要多次确认无误）</li>
</ul></li>
</ul>
<h4 id="异常订单">2.1.2.2 异常订单</h4>
<h5 id="支付但未开单">2.1.2.2.1 支付但未开单</h5>
<ul>
<li>场景：
<ul>
<li>用户明明支付成功，但未开通订单</li>
</ul></li>
<li>问题分析：
<ul>
<li>一般支付渠道会间隔性多次回调开单链接，如果支付未开单，银行未回调的可能性比较小，着重排查开单接口是否可用。如果可用追查日志是否出现异常记录。</li>
</ul></li>
<li>应对措施：
<ul>
<li>对账阶段可以查漏，程序自动完成补单，但是处理相对延迟，取决于支付渠道的对账文件下发周期（2011-2013年，支付测试数据与财务人工对账的历程）人工补单，人工查询支付渠道后台数据，确认已支付的情况下，介入补单流程人工处理</li>
</ul></li>
</ul>
<h5 id="未支付但已开单">2.1.2.2.2 未支付但已开单</h5>
<ul>
<li>场景：
<ul>
<li>用户未支付，或者财务中心未收到这笔款项，订单状态已开通。这种就问题比较严重了</li>
</ul></li>
<li>应对措施：
<ul>
<li>首先排除人为操作因素。其次排查系统是否存在漏洞或者级联开单的情况</li>
</ul></li>
</ul>
<h4 id="回调延迟">2.1.2.3 回调延迟</h4>
<ul>
<li>场景：
<ul>
<li>用户是期望支付完成的同时立马看到结果。但是中间多层远程的调用，可能发生订单状态更新延迟问题。</li>
</ul></li>
<li>解决：
<ul>
<li>主动查询。在用户查看订单的时候，如果是类似“支付中”的中间态时，触发远程订单状态查询接口。（大家看到的点击“支付完成”跳转的过程，触发远程支付结果查询）</li>
</ul></li>
</ul>
<h4 id="支付路由">2.1.2.4 支付路由</h4>
<ul>
<li>（你所看到的收银台图标内情…）</li>
<li>背景：
<ul>
<li>保障支付可用性及支付分流，支付中心对接多家渠道</li>
</ul></li>
<li>方案：
<ul>
<li>支付中心对接多个支付渠道，支付宝，微信，各银行或第三方支付供应商。</li>
<li>对不同用户，进入支付方式选择页时，做支付分流。</li>
<li>做好监控统计，一旦某个支付渠道不可用或者延迟较大，切掉，下线，或者降权。</li>
</ul></li>
</ul>
<h3 id="营销中心">2.1.3 营销中心</h3>
<h4 id="概述-1">2.1.3.1 概述</h4>
<ul>
<li>大促和活动不分家，一般营销中心所面对的主要是促销策略、优惠方式等业务上的架构问题。</li>
<li>从促销活动的范围来看，分为单品促销活动、套装促销活动、店铺促销活动，平台促销活动。</li>
<li>从促销类型来看，分为满减、折扣、赠品等。</li>
<li>业务复杂度高，一般遵循 “同类营销仅可选其一，不同类营销可叠加”
的规则。同类叠加意义不大且会造成系统复杂度上升，引发用户困惑。</li>
</ul>
<h4 id="前端设计">2.1.3.2 前端设计</h4>
<ul>
<li>用户体验上的设计，比如购物车里商品的排序，按商铺分门别类。优惠总价格及时调整。这些依赖于前端的ui设计和交互体验。</li>
</ul>
<h4 id="赠品设计">2.1.3.3 赠品设计</h4>
<ul>
<li>(SPU , SKU 基础概念)</li>
<li>赠品有两种设计方案，一种是不做单独的SKU，只有一个空的描述，设计简单，缺点是没有商品详情页，无法给用户直观的查看和估值。</li>
<li>另一种是单独做SKU，赠品也会作为一个商品存在，与主商品关联，下单的时候将会自动加到商品列表，价格降为0。这种更为常见。整个商品有完善的详情页，用户可以直接看到价格甚至单独下单购买。</li>
</ul>
<h4 id="排他与优先级">2.1.3.4 排他与优先级</h4>
<ul>
<li>检查同类别促销，将最大优惠力度的规则应用到订单，并且满足排他性，同类只享受其一。比如满10减3，满20减5，那么用户购买大于20时，只减5即可。</li>
<li>不同类别不做排斥，如购物车整体满减后，不影响单个商品的折扣。在记录数据时，优惠要细化到每个单独的订单明细上。退款也做到明细级别的单独退。</li>
</ul>
<h4 id="价格分摊">2.1.3.5 价格分摊</h4>
<ul>
<li>（有没有遇到精度问题？价格字段如何设计？）</li>
<li>满减或平台券等优惠，在多个商品下单时，涉及到金额的分摊。即
优惠总额度/购物车总额
，得到比例后再按比例均分到每个商品。只有分摊才能在发生部分退款时退回真实金额。</li>
<li>但是这会涉及到一个精度问题。举例如下：满99减9活动，假设用户购买了
30+40+50=120，3件商品应付111元。按比例折算的话，9/99取4位小数是0.9090，那么分摊后为30x0.9090+40x0.9090+50x0.9090=109.08与实际支付金额出现偏差。这会造成财务无法平账。</li>
<li>解决方案：记账时在订单明细记录，将误差
111-109.08=1.92计入金额最大的明细，也就是50元商品上。那么最终记账为：30x0.9090
+ 40x0.9090 +（50*0.909+1.92）= 111</li>
</ul>
<h4 id="退单处理">2.1.3.6 退单处理</h4>
<ul>
<li>退单后要同时恢复用户的权益，比如优惠券的再次使用，限购次数等。确保用户体验。</li>
</ul>
<h3 id="商品中心">2.1.4 商品中心</h3>
<h4 id="显示商品的下架控制">2.1.4.1 显示商品的下架控制</h4>
<ul>
<li>这个和超时订单设计方案类似，前面已经提到不再赘述。 #### 2.1.4.2
库存管理</li>
<li>普通商品可以直接借助数据库锁实现，一般分乐观锁和悲观锁两种方案，如果采用悲观锁（如select语句带forupdate），会带来很大的性能阻塞，所以更多的采用乐观锁设计。（幂等性课题的锁机制有详细讲解）</li>
<li>乐观锁就是在最后执行库存扣减操作时，将事务开始前获取的库存数量带入到SQL语句中作为更新的where条件，如果数量相等，则该条更新库存的语句成功执行返回update条数为1；如果不相等，则表示该商品的库存信息已经被其他事务修改，需要放弃该条update的执行，采用重试处理。</li>
<li>库存秒杀商品因为大批量的访问在一瞬间涌入，数据库扛不住。可以采用
redis缓存做decr处理，正常下单后，再使用mq异步更新到db。（秒杀不超卖课题的库存控制）</li>
</ul>
<h2 id="技术中台-1">2.2 技术中台</h2>
<h3 id="数据库优化">2.2.1 数据库优化</h3>
<ul>
<li>数据库层的调优，一般发生在大促前的预备阶段，一旦大促开始，对数据库的优化已经来不及了。
<ul>
<li>在大促开始前梳理耗时查询业务，对关键业务压测。</li>
<li>开启mysql的慢查询日志（两种方式）</li>
</ul></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#配置文件方式，需要重启mysql</span><br><span class="line">#日志文件位置</span><br><span class="line">log-slow-queries=/opt/data/slowquery.log</span><br><span class="line">#超时时间，默认10s</span><br><span class="line">long_query_time=2</span><br><span class="line">#临时开启，不需要重启</span><br><span class="line">set global slow_query_log=on;</span><br><span class="line">set global long_query_time=10;</span><br><span class="line">set global slow_query_log_file=‘/opt/data/slow_query.log’</span><br></pre></td></tr></table></figure>
<ul>
<li>使用mysqldumpslow命令解析mysql慢查询日志</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 慢查询日志以文本打开，可读性很高</span><br><span class="line">-- 查询次数，耗时，锁时间，返回结果集条数（扫描行数），执行者</span><br><span class="line">Count: 1 Time=10.91s (10s) Lock=0.00s (0s) Rows=1000.0 (1000),</span><br><span class="line">mysql[mysql]@[10.1.1.1]</span><br><span class="line">SELECT * FROM order_history</span><br></pre></td></tr></table></figure>
<ul>
<li>借助explain查看sql执行计划，对sql调优，或其他优化工具</li>
</ul>
<h3 id="缓存优化">2.2.2 缓存优化</h3>
<p>（业务篇红包雨课题里有缓存结构的深度应用）</p>
<h4 id="策略">2.2.2.1 策略</h4>
<ul>
<li>热点数据预热：
<ul>
<li>（常规加载机制画图展示）</li>
<li>常规缓存设计趋向于懒加载，大促期间的热点数据尽量做到预热加载。比如某个促销专题，不要等待活动开始的一瞬间再读库加缓存，搞不好引发击穿。</li>
</ul></li>
<li>细粒度设计：
<ul>
<li>（细粒度缓存结构画图展示）</li>
<li>集合与单体分开存储，缓存结构细粒度化。如某个橱窗的推荐商品列表，常规存储一个key，value为整个商品集合。优化为列表与每个商品详细信息设置两个独立缓存值，在查询环节组装，可以降低发生修改时对缓存的冲击。新增一个推荐则失效列表，修改商品则仅仅失效当前商品缓存。</li>
</ul></li>
<li>可用性：
<ul>
<li>（回顾三种缓存问题）</li>
<li>只要缓存失效时间设置分散，雪崩的可能性不大</li>
<li>防范恶意攻击引发穿透，前端做到防刷，业务层面要注意合法性校验，非法key的失效时间需要评估。</li>
<li>击穿可能性升高，大促高并发下，修改时，如果采用key删除策略很可能触发击穿，修改少可以优化为双写。</li>
</ul></li>
</ul>
<h4 id="多级缓存">2.2.2.2 多级缓存</h4>
<ul>
<li>优化缓存体系，对关键业务请求，如商品详情页，采用多级缓存处理</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-16_12-08-01.png"/></div></div>
<ul>
<li>首先看浏览器缓存，一般浏览器缓存可分为两种手段，分别交给浏览器和服务端执行</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-16_12-08-26.png"/></div></div>
<ul>
<li><p>客户端判决：为请求Header设置Expires（http1.0） 和
Cache-Control（http1.1），客户端本地比较决定是否使用缓存</p></li>
<li><p>服务端判决：借助Last-Modified/If-Modified-Since（http1.0）或ETag/If-None-Match，服务器端比较决定返回200带body还是304仅有head头
(画图展示)</p></li>
<li><p>Last-Modified &lt; ETag &lt; Expires &lt; Cache-Control</p></li>
<li><p>CDN：借助CDN的dns解析，对用户做ip分流，CDN作为应用服务器的代理，抵挡前端的流量洪峰。同样，前面提到的http缓存策略对CDN依然有效。</p></li>
<li><p>nginx缓存：nginx除了作为负载均衡，也可以作为请求级别的缓存，一段典型配置如下：
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    # 定义缓存路径、过期时间、空间大小等</span><br><span class="line">    proxy_cache_path /tmp/nginx/cache levels=2:2:2 use_temp_path=off</span><br><span class="line">keys_zone=my_cache:10m inactive=1h max_size=1g;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name xxx.xxx.com;</span><br><span class="line">        # 添加header头，缓存状态信息</span><br><span class="line">        add_header X-Cache-Status $upstream_cache_status;</span><br><span class="line">        location / &#123;</span><br><span class="line">            # 定义缓存名</span><br><span class="line">            proxy_cache my_cache;</span><br><span class="line">            # 定义缓存key</span><br><span class="line">            proxy_cache_key $host$uri$is_args$args;</span><br><span class="line">            # 针对返回状态码单独定义缓存时间</span><br><span class="line">            proxy_cache_valid 200 304 10m;</span><br><span class="line">            # url 上设置请求 nocache=true 时不走缓存。</span><br><span class="line">            proxy_cache_bypass $arg_nocache $http_nocahe;</span><br><span class="line">            proxy_pass http://localhost:8080;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>分布式缓存：redis做应用层缓存，不多解释。但是要注意做好扩容预案和业务层优化</p>
<ul>
<li>依据预估量做相应的扩容或资源申请，纯做缓存时可以关闭持久化，内存超出60%将变得不稳定。</li>
<li>频繁交互业务从java端下移到lua脚本实现，一方面可以实现原子性，另一方面有效减少网络延时和数据的冗余传输。以平台优惠券领取为例：（画图对照redis指令）</li>
</ul></li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-16_12-11-22.png"/></div></div>
<h3 id="分流与限流">2.2.3 分流与限流</h3>
<ul>
<li>（算法与数据结构应用 - 限流算法有详细实现）</li>
<li>CDN的引入本身起到了按ip分流的作用，但是我们可以在下层做到更细粒度化的控制。根据业务情况将不同的请求分流到各自的服务器。</li>
<li>限流不同与分流，是对下层的保护，当系统超过一定流量后，超过的流量做直接拒绝处理，以便保护后端的服务，原则就是要么不进来，进来的都正常服务。常见的限流算法有三种：计数器、漏桶、令牌桶。</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-16_12-12-16.png"/></div></div>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-16_12-12-29.png"/></div></div>
<h4 id="业务分流">2.2.3.1 业务分流</h4>
<ul>
<li>根据不同的业务线分发请求，配备二级域名如b2b.xxx.com，b2c.xxx.com，或者在nginx软负载层针对不同虚拟主机名做upstream分发</li>
<li>新上的双11活动页，或者促销专题页面，采用新访问入口和机器部署，与主站分离。活动结束后也利于机器资源的快速释放</li>
</ul>
<h4 id="终端分流">2.2.3.2 终端分流</h4>
<ul>
<li>按不同的请求终端分流，在header头的user-agent中可以捕获用户的访问终端。android，ios，pc，根据不同终端设备，做流量分发，到不同的应用机器。同时方便对用户终端流量的监控和统计。</li>
</ul>
<h4 id="nginx限流">2.2.3.3 nginx限流</h4>
<ul>
<li>评估双11可能的流量，结合具体业务模块，配备对应限流措施。主要有流量限制和连接数限制两个维度。</li>
<li>流量限制：限制访问频率，其目的是基于漏桶算法实现ip级别的防刷。Nginx中使用ngx_http_limit_req_module
模块来限制请求的访问频率，基于漏桶算法原理实现。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#$binary_remote_addr 表示通过remote_addr这个标识来做限制</span><br><span class="line">#binary_的目的是缩写内存占用量，是限制同一客户端ip地址</span><br><span class="line">#zone=one:10m表示生成一个大小为10M，名字为one的内存区域，用来存储访问的频次信息</span><br><span class="line">#rate=1r/s表示允许相同标识的客户端的访问频次</span><br><span class="line">limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;</span><br><span class="line">server &#123;</span><br><span class="line">    location /b2b/ &#123;</span><br><span class="line">    #zone=one 设置使用哪个配置区域来做限制，与上面limit_req_zone 里的name对应</span><br><span class="line">    #burst=5,设置一个大小为5的缓冲区,当有大量请求时，超过了访问频次限制的请求可 以先放到这个缓</span><br><span class="line">    冲区内</span><br><span class="line">    #nodelay，如果设置，超过访问频次而且缓冲区也满了的时候就会直接返回503,如果  没有设置，则所</span><br><span class="line">    有请求会等待排队</span><br><span class="line">    limit_req zone=one burst=5 nodelay;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>连接数限制：Nginx 的
ngx_http_limit_conn_module模块提供了对资源连接数进行限制的功能</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#$binary_remote_addr同上</span><br><span class="line">limit_conn_zone $binary_remote_addr zone=addr:10m;</span><br><span class="line">server &#123;</span><br><span class="line">    location /b2b/ &#123;</span><br><span class="line">        # 限制每个ip下最大只能有一个连接</span><br><span class="line">        limit_conn addr 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="网关限流">2.2.3.4 网关限流</h4>
<ul>
<li>从代理服务器放进来的流量，会进入应用服务器，第一道关卡是微服务的网关。应对大促，针对各个微服务具体业务具体分析，配备对应限流措施。zuul和gateway是团队中最常遇到的网关组件。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zuul.routes.userinfo.path=/user/**</span><br><span class="line">zuul.routes.userinfo.serviceId=user-service</span><br><span class="line">zuul.ratelimit.enabled=true</span><br><span class="line">zuul.ratelimit.policies.userinfo.limit=3</span><br><span class="line">zuul.ratelimit.policies.userinfo.refresh-interval=60</span><br><span class="line">zuul.ratelimit.policies.userinfo.type=origin</span><br><span class="line">routes:</span><br><span class="line">    - id: user_route</span><br><span class="line">        uri: http://localhost:8080</span><br><span class="line">        predicates:</span><br><span class="line">            - Path=/*</span><br><span class="line">        filters:</span><br><span class="line">            - name: RequestRateLimiter</span><br><span class="line">        args:</span><br><span class="line">            redis-rate-limiter.replenishRate: 1</span><br><span class="line">            redis-rate-limiter.burstCapacity: 1</span><br><span class="line">            key-resolver: &quot;#&#123;@ipKeyResolver&#125;</span><br></pre></td></tr></table></figure>
<h3 id="服务降级">2.2.4 服务降级</h3>
<ul>
<li>当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心交易正常运作或高效运作。是一种舍车保帅的策略。</li>
<li>比如平时客户来我的店铺购买衣服。平时可以试穿，给出建议，帮助搭配，最后下单支付，送用户祝福卡片等。双11大促则简单粗暴响应下单支付收钱发货。其他不太重要的服务关闭开关，腾出资源让位主交易流程。</li>
<li>服务降级可以从前端页面，后端微服务两个点着手。</li>
</ul>
<h4 id="页面降级">2.2.4.1 页面降级</h4>
<ul>
<li>很好理解，针对页面元素处理，将不重要的操作入口置灰或屏蔽。平时调用后端接口实时呈现数据的地方替换为静态页也可以理解为一种降级操作。</li>
</ul>
<h4 id="微服务降级">2.2.4.2 微服务降级</h4>
<ul>
<li>配置接口开关，并通过配置中心可以灵活开闭。必要时关闭开关，屏蔽接口的实际查询，直接返回mock数据。例如，购买了本商品的用户还购买过哪些商品接口，在业务上需要调用数据中台订单统计服务，访问量大时，关闭对外调用，直接返回设置好的一批相关商品，起到降级保护作用。</li>
</ul>
<h4 id="快速熔断">2.2.4.3 快速熔断</h4>
<ul>
<li>快速熔断可以认为是在应对突发情况时，对服务请求结果准确性的一种妥协。避免因单一服务垮台导致整个调用链路崩溃。常用手段如下：
<ul>
<li>抛异常：这种处理需要上层配备异常处理机制，在捕获异常时，导向错误页、等待页或稍后重试等。</li>
<li>返回NULL：简单粗暴，可能会出现空白结果，并不友好。</li>
<li>调用Fallback处理逻辑：更人性化的手段，也最常用。为每个业务配备一个备选方案。</li>
</ul></li>
<li>举个例子：商品页或订单详情页面，一般都会有猜你喜欢这个模块，通过对用户的购买行为、浏览记录、收藏记录等等进行大数据分析，然后给每一个用户推送自己可能喜欢的商品。在双11大促背景下，如果推荐服务压力过大，出现服务出错、网络延迟等等之类突发情况，导致最后调用服务失败，则可以配备一个fallback，直接返回当前商品同类别下的几款商品，作为备选方案，这比抛异常或者返回null空
白页面体验要更优。</li>
</ul>
<h3 id="安全性">2.2.5 安全性</h3>
<ul>
<li>大促前做好安全防范。常见的DDos，Arp，脚本等攻击平时也会存在，日常防范已经配备。大促期间需要注意的可能更多的是业务层面的入侵，比如抢购或秒杀时的恶意刷接口。
<ul>
<li>实名制，限制单用户，单ip等维度下的频次</li>
<li>必要的地方添加验证码（图片复杂度升级，或滑块等新型方式）</li>
<li>黑名单机制，一旦发现恶意行为，列入黑名单，并自动维护</li>
</ul></li>
</ul>
<h2 id="运维中台-1">2.3 运维中台</h2>
<h3 id="做好灾备">2.3.1 做好灾备</h3>
<ul>
<li>（2018从一次断电看灾备的背景与经历，30分钟以内）</li>
<li>灾备是应对大型故障的保底措施，最好的结局是永远不要触发，但是大促前需要做好灾备切换演练，可以选择大促前用户量少的时间段进行：</li>
<li>1）前期准备：两地灾备程序同步维护，大促相关的迭代和活动专题上线确保两地测试ok，镜像版本统一</li>
<li>2）数据库配置两地主从，或双主单写。切换前做好数据同步性检查</li>
<li>3）启用脚本，切换代理服务器，代理流量转入灾备机房，正式环境还需要处理dns指向</li>
<li>4）分布式文件灾备日常采用rsync等实时同步，采用云存储的可以忽略</li>
<li>5）es索引等其他数据确保日常同步</li>
<li>6）注意挂好维护页，友好提示</li>
<li>7）配备自动化测试脚本以便快速验证切换结果</li>
</ul>
<h3 id="配备监控">2.3.2 配备监控</h3>
<h4 id="基础设施监控">2.3.2.1 基础设施监控</h4>
<ul>
<li>包括物理机、Docker 容器、以及对交换机、IP 进行监控</li>
<li>借助zabbix等开源软件对机器资源配置监控，如果采用云化部署，各大云供应商都会配备完善的监控机制</li>
</ul>
<h4 id="应用级监控">2.3.2.2 应用级监控</h4>
<ul>
<li>主动监控，日志或消息队列形式打点输出，定时汇报
（日志平台追踪课题）</li>
<li>被动监控，添加监控接口，监控系统定时请求确认可用性</li>
</ul>
<h4 id="业务监控">2.3.2.3 业务监控</h4>
<ul>
<li>对具体业务点做监控处理，如订单量、登录量、注册量、某些页面的访问量等关键点采用异步消息方式推送到监控中心，监控中心针对特定队列的数据做统计和展示。</li>
</ul>
<h4 id="客服一线反馈">2.3.2.4 客服一线反馈</h4>
<ul>
<li>主动监控依然无法察觉的情况下，来自客服的一线反馈成为最后关卡。优先级也最高。开发故障快速响应平台，做到实时性保障。做到客服
- 业务线 - 产品 - 技术排查的及时响应，快速排查。</li>
</ul>
<h3 id="资源盘点">2.3.3 资源盘点</h3>
<h4 id="网络设施扩展">2.3.3.1 网络设施扩展</h4>
<ul>
<li>网络带宽是影响访问流量的重要因素，做好各个机房网络带宽预估，数据在两地机房间传输并且要求低延迟的场景，如数据库主从，可以考虑机房专线。使用公有云的服务，可以购买临时流量。</li>
</ul>
<h4 id="硬件资源盘点">2.3.3.2 硬件资源盘点</h4>
<ul>
<li>对容量做预估和硬件资源盘点。配合大促期间不同服务的架构设计，以及项目本身的特性，对cpu，内存做评估。偏运算的项目，重度使用多线程的项目偏cpu，需要大量对象或集合处理的项目偏内存。</li>
</ul>
<h4 id="容器盘点">2.3.3.3 容器盘点</h4>
<ul>
<li>所有项目容器化部署，基于镜像即版本理念，打好各个服务的镜像是docker快速复制扩容的基础。大促前对各个中心微服务做统计和盘点。</li>
<li>借助swarm和k8s等编排工具，快速实现容器的伸缩。 （运维篇会讲到）</li>
</ul>
<h2 id="数据中台-1">2.4 数据中台</h2>
<ul>
<li>数据中台多为大数据相关架构体系，大促期间，同样可能面临大批数据洪峰，比如订单量激增、用户行为数据暴涨等场景。简单看一下可能需要做的一些应对。（大屏实时计算课题）</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-16_12-27-41.png"/></div></div>
<h3 id="数据通道">2.4.1 数据通道</h3>
<ul>
<li>对数据传输通道扩容，比如kafka扩大分区数，rabbitmq增加细分队列。一方面实现了扩容，另一方面在传输的起始阶段就对数据做了一定的分类。</li>
<li>数据降级，关闭某些非核心数据的通道采集，让位网络带宽给核心业务数据。</li>
</ul>
<h3 id="数据展示">2.4.2 数据展示</h3>
<ul>
<li>数据大屏开发。对实时性有一定要求，多采用流式运算。</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-16_12-28-45.png"/></div></div>
<h2 id="其他准备">2.5 其他准备</h2>
<h3 id="流量预估">2.5.1 流量预估</h3>
<ul>
<li>对关键业务的体量做好预估。如用户的注册、下单量、首页，商品详情页等关键页面的qps，为压测提供参考指标。</li>
</ul>
<h3 id="资源预估">2.5.2 资源预估</h3>
<ul>
<li>架构师统计各中心服务关系，对各个服务扩容做预估，汇总。</li>
</ul>
<h3 id="压测准备">2.5.3 压测准备</h3>
<p>（全链路压测课题） #### 2.5.3.1 线下压测 *
（大家当前使用的环境都有哪些？上线模式是什么样的） *
当前成熟系统都具备各种环境，开发环境、测试环境、准生产环境等，对线下可以选择准生产环境做为压测，模拟线上。
*
线下压测数据安全，不必担心对线上造成干扰。所压测的值可以用于相对性比较，比如其中全链路的某个环境哪个是瓶颈。但是无法精准反馈线上的真实场景。</p>
<h4 id="线上压测谨慎">2.5.3.2 线上压测（谨慎）</h4>
<ul>
<li>重点看线上压测，线上压测压出的数据是最真实有效的。但是因为使用的是生产环境，操作不当可能引发灾难性后果。</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-16_12-30-47.png"/></div></div>
<ul>
<li>1）在全链路压测环境下，服务调用关系错综复杂，最重要的是实现压测流量的标识，以及标识在服务上下文间如何有效传递不丢失。服务内借助threadlocal，但是要注意多线程下失效。服务间通过改写远程调用框架或借助框架提供的Context设置。（分布式日志平台，访问链路追踪课题）</li>
<li>2）数据隔离，数据库可以创建影子表，redis等缓存可以设置shadow_等前缀，从开发框架层面封装处理，对数据层持久化框架做二次开发，使其自动发现压测数据。</li>
<li>3）外部服务可以借助服务降级功能，添加开关判断属于压测流量时开关进入降级或mock，比如收银程序添加挡板，直接返回成功，短信应用直接默认一个短信号码。</li>
<li>4）日志打印需要隔离，可以借助分布式日志平台收集时采用不同的输出通道和队列。</li>
<li>5）压测数据最好的方式是流量克隆（TCPCopy工具等），将线上的实际访问请求克隆放大几倍加压到压测入口，如果实现不了，尽量模拟线上的真实数据结构和体量。</li>
<li>6）做好全压流量规划，按预估2~3倍加压，确定流量比例，打压。</li>
</ul>
<h3 id="人员配备">2.5.4 人员配备</h3>
<ul>
<li>人员互备，防止故障，及时响应，应对双11不是什么神秘事。</li>
</ul>
]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
      <tags>
        <tag>电商系统在双11大促活动下的架构体系</tag>
      </tags>
  </entry>
  <entry>
    <title>环境安装 · Git</title>
    <url>/2025/02/23/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%C2%B7Git/</url>
    <content><![CDATA[<h1 id="windows安装git">1. Windows安装Git</h1>
<h2 id="下载git">1.1 下载Git</h2>
<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://git-scm.com/">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="background-image: url(https://git-scm.com/images/logo@2x.png)">
          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Git官网</div>
            <div class="tag-link-sitename">提供了各个平台(Windows、Mac、Linux)的安装程序。 </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-02-24_22-11-21.png"/></div></div>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-02-24_22-13-20.png"/></div></div>
<h2 id="安装git">1.2 安装Git</h2>
<ul>
<li>双击git-xx-bit.exe开始安装,点击next进行下一步安装</li>
<li>安装目录：建议其他盘(除C盘以外)</li>
<li>后续操作选择默认即可</li>
</ul>
]]></content>
      <categories>
        <category>环境安装</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>理论知识 · ElementPlus</title>
    <url>/2025/03/08/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%C2%B7Element%20Plus/</url>
    <content><![CDATA[<h1 id="什么是elementplus">1. 什么是ElementPlus</h1>
<ul>
<li>Element:是饿了么团队研发的，基于Vue3，面向设计师和开发者的<span class='p red'>组件</span>库</li>
<li>组件：组成网页的部件，例如：超链接，按钮，图片，表格，表单，分页条等等。</li>
<li>官网</li>
</ul>
<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://element.eleme.cn/#/zh-CN">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">ElementPlus</div>
            <div class="tag-link-sitename">https://element.eleme.cn/#/zh-CN</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<h2 id="elementplus快速入门">1.1 ElementPlus快速入门</h2>
<ul>
<li>准备工作：
<ul>
<li>创建一个工程化的Vue项目</li>
<li>参照官方文档，安装ElementPlus组件库（在当前工程的目录下）
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></table></figure></li>
<li>main.js中引入Element Plus组件库（参照官方文档）</li>
</ul></li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-08_17-50-43.png"/></div></div>
]]></content>
      <categories>
        <category>理论知识</category>
      </categories>
      <tags>
        <tag>ElementPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>理论知识 · Git</title>
    <url>/2025/03/17/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%C2%B7Git/</url>
    <content><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.yuque.com/u21711743/wol4hq/en9rln9lktsw5nhc">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Git-韩顺平</div>
            <div class="tag-link-sitename">https://www.yuque.com/u21711743/wol4hq/en9rln9lktsw5nhc </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
]]></content>
      <categories>
        <category>理论知识</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>环境安装 · Node.js</title>
    <url>/2025/02/23/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%C2%B7Node.js/</url>
    <content><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-bullhorn flat"><p><mark class="hl-label orange">引用文章</mark></p>
<ul>
<li>Nodejs安装教程：<a
href="https://blog.csdn.net/weixin_42474607/article/details/140769161">https://blog.csdn.net/weixin_42474607/article/details/140769161</a></li>
</ul>
</div>
]]></content>
      <categories>
        <category>环境安装</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>理论知识 · JavaWeb</title>
    <url>/2025/03/17/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%C2%B7JavaWeb/</url>
    <content><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.yuque.com/u21711743/wol4hq/rf8ibc7z8663u0md">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">JavaWeb-韩顺平</div>
            <div class="tag-link-sitename">https://www.yuque.com/u21711743/wol4hq/rf8ibc7z8663u0md </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
]]></content>
      <categories>
        <category>理论知识</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>理论知识 · JavaSE</title>
    <url>/2025/02/27/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%C2%B7JavaSE/</url>
    <content><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.yuque.com/u21711743/wol4hq/rqr9xuk5dpenb0dv">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">JavaSE笔记-韩顺平</div>
            <div class="tag-link-sitename">https://www.yuque.com/u21711743/wol4hq/rqr9xuk5dpenb0dv</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
]]></content>
      <categories>
        <category>理论知识</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>理论知识 · MySQL</title>
    <url>/2025/02/27/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%C2%B7MySQL/</url>
    <content><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.yuque.com/u21711743/wol4hq/ub8e2xuaoizm0cys">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Mysql笔记-宋红康</div>
            <div class="tag-link-sitename">https://www.yuque.com/u21711743/wol4hq/ub8e2xuaoizm0cys</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.csdn.net/LW_20180806/article/details/125490046">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">JDBC-韩顺平</div>
            <div class="tag-link-sitename">https://blog.csdn.net/LW_20180806/article/details/125490046</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
]]></content>
      <categories>
        <category>理论知识</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>理论知识 · Vue</title>
    <url>/2025/03/02/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%C2%B7Vue/</url>
    <content><![CDATA[<div class="note info modern"><p>前置知识：HTML,CSS,JS</p>
</div>
<h1 id="什么是vue">1. 什么是Vue</h1>
<ul>
<li>Vue是一款用于<span class='p red'>构建用户界面</span>的渐进式的JavaScript框架</li>
</ul>
<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://cn.vuejs.org/">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Vue官方网站</div>
            <div class="tag-link-sitename">https://cn.vuejs.org/</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-08_11-31-36.png"/></div></div>
<h1 id="局部使用vue">2. 局部使用Vue</h1>
<h2 id="快速入门">2.1 快速入门</h2>
<ul>
<li>准备
<ul>
<li>准备html页面，并引入Vue模块（官方提供）</li>
<li>创建Vue程序的应用实例</li>
<li>准备元素（div），被Vue控制</li>
</ul></li>
<li>构建用户界面
<ul>
<li>准备数据</li>
<li>通过插值表达式渲染页面</li>
</ul></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># body体中</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">&#x27;https://unpkg.com/vue@3/dist/vue.esm-browser.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>: <span class="string">&quot;hello vue3&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="常用指令">2.2 常用指令</h2>
<ul>
<li>指令：HTML标签上带有v-前缀的特殊属性，不同的指令具有不同的含义，可以实现不同的功能</li>
<li>常用指令：</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-08_11-57-03.png"/></div></div>
<h3 id="v-for">2.2.1 v-for</h3>
<ul>
<li>作用：列表渲染，遍历容器的元素或者对象的属性</li>
<li>语法：v-for = “(item,idex) in items”
<ul>
<li>参数说明
<ul>
<li>items：为遍历的数组</li>
<li>item:为遍历出来的元素</li>
<li>index:为索引/下标，从0开始;可以省略，省略index语法：v-for = “item in
items” <div class="note info modern"><p>注意：遍历的数组，必须在data中定义；要想让哪个标签循环展示多次，就在哪个标签上使用v-for指令</p>
</div></li>
</ul></li>
</ul></li>
</ul>
<h3 id="v-bind">2.2.2 v-bind</h3>
<ul>
<li>作用：动态为HTML标签绑定属性值，如设置href,src,style样式等</li>
<li>语法：v-bind:属性名=“属性值”</li>
<li>简化：:属性名=“属性值”</li>
</ul>
<div class="note info modern"><p>注意：v-bind所绑定的数据，必须在data中定义</p>
</div>
<h3 id="v-if-v-show">2.2.3 v-if &amp; v-show</h3>
<ul>
<li>作用：这两类指令，都是用来控制元素的显示与隐藏的</li>
<li>v-if
<ul>
<li>语法：v-if=“表达式”，表达式值为true,显示:false,隐藏</li>
<li>其他：可以配合v-else-if/v-else进行链式调用条件判断</li>
</ul></li>
<li>v-show
<ul>
<li>语法：v-show=“表达式”，表达式值为true，显示：false,隐藏</li>
<li>原理：基于CSS样式display来控制显示与隐藏</li>
</ul></li>
</ul>
<h3 id="v-on">2.2.4 v-on</h3>
<ul>
<li>作用：为html标签绑定事件</li>
<li>语法：
<ul>
<li>v-on：事件名=“函数名”</li>
<li>简写为 <span class="citation"
data-cites="事件名">@事件名</span>=“函数名”</li>
</ul></li>
</ul>
<h3 id="v-model">2.2.5 v-model</h3>
<ul>
<li>作用：在表单元素上使用，<span class='p red'>双向数据绑定</span>。可以方便的<span class='p red'>获取或设置</span>表单项数据</li>
<li>语法：v-model=“变量名” <div class="note info modern"><p>注意：v-model中绑定的变量，必须在data中定义</p>
</div></li>
</ul>
<h2 id="生命周期">2.3 生命周期</h2>
<ul>
<li>生命周期：指一个对象从创建到销毁的整个过程</li>
<li>生命周期的八个阶段：每个阶段会自动执行一个生命周期方法（钩子），让开发者有机会在特定的阶段执行自己的代码</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-08_16-47-24.png"/></div></div>
<h1 id="axios">3. Axios</h1>
<ul>
<li>介绍：Axios对原生的Ajax进行了封装，简化书写，快速开发</li>
<li>官网： <div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.axios-http.cn/">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Axios官方网站</div>
            <div class="tag-link-sitename">https://www.axios-http.cn/</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div></li>
</ul>
<h2 id="axios使用步骤">3.1 Axios使用步骤</h2>
<ul>
<li>引入Axios的js文件（参照官网）</li>
<li>使用Axios发送请求，并获取相应结果</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-08_17-03-30.png"/></div></div>
<h2 id="axios-请求方式别名">3.2 Axios-请求方式别名</h2>
<ul>
<li>为了方便起见，Axios已经为所有支持的请求方法提供了别名</li>
<li>格式：axios.请求方式(url [, data[, config]])</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-08_17-05-58.png"/></div></div>
<h1 id="整站使用vue工程化">4. 整站使用Vue(工程化)</h1>
<h2 id="环境准备">4.1 环境准备</h2>
<ul>
<li>介绍:create-vue是Vue官方提供的最新的脚手架工具，用于快速生成一个工程化的Vue项目。</li>
<li>create-vue提供了如下功能:
<ul>
<li>统一的目录结构</li>
<li>本地调试</li>
<li>热部署</li>
<li>单元测试</li>
<li>集成打包</li>
</ul></li>
<li>依赖环境:NodeJS</li>
</ul>
<h3 id="安装node.js">4.1.1 安装Node.js</h3>
<ul>
<li>Nodejs安装教程：请本站点搜索Node.js安装</li>
</ul>
<h2 id="vue项目创建和启动">4.2 Vue项目创建和启动</h2>
<h3 id="vue项目-创建">4.2.1 Vue项目-创建</h3>
<ul>
<li>创建一个工程化的Vue项目，执行指令 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure> <div class="note info modern"><p>提示：执行上述指令，将会安装并执行create-vue,它是vue官方的项目脚手架工具</p>
</div></li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-08_17-28-34.png"/></div></div>
<h3 id="vue项目-安装依赖">4.2.2 Vue项目-安装依赖</h3>
<ul>
<li>进入项目目录，执行命令安装当前项目的依赖 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="vue项目-目录结构">4.2.3 Vue项目-目录结构</h3>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-08_17-30-55.png"/></div></div>
<h3 id="vue项目-启动">4.2.4 Vue项目-启动</h3>
<ul>
<li>执行命令，就可以启动vue项目 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></li>
<li>访问项目：打开浏览器，在浏览器地址栏访问 <a
href="http://localhost:5173">[(http://localhost:5173)]</a></li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-08_17-34-03.png"/></div></div>
<h2 id="vue项目开发流程">4.3 Vue项目开发流程</h2>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-08_17-36-42.png"/></div></div>
<ul>
<li>.vue是Vue项目中的组件文件，在Vue项目中也称为单文件组件（SFC,Single-File
Components）。</li>
<li>Vue的单文件组件会将一个组件的逻辑（JS）,模板(HTML)和样式（CSS）封装在同一个文件里（*.vue）。</li>
</ul>
<h2 id="api风格">4.4 API风格</h2>
<ul>
<li>Vue的组件有两种不同的风格：组合式API和选项式API</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-08_17-40-04.png"/></div></div>
<h3 id="组合式api">4.4.1 组合式API</h3>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-08_17-40-50.png"/></div></div>
]]></content>
      <categories>
        <category>理论知识</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>理论知识 · Maven</title>
    <url>/2025/03/17/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%C2%B7Maven/</url>
    <content><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.yuque.com/u21711743/wol4hq/qfpw6y6kblqncb0l">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Maven-韩顺平</div>
            <div class="tag-link-sitename">https://www.yuque.com/u21711743/wol4hq/qfpw6y6kblqncb0l </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
]]></content>
      <categories>
        <category>理论知识</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>理论知识 · SpringBoot</title>
    <url>/2025/03/02/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%C2%B7SpringBoot/</url>
    <content><![CDATA[<h1 id="springboot介绍">1. SpringBoot介绍</h1>
<h2 id="概述">1.1 概述</h2>
<ul>
<li>Spring Boot是Spring提供的一个子项目，用于快速构建Spring应用程序</li>
<li>Spring家族下的组件
<ul>
<li>Spring Boot:项目构建</li>
<li>Spring Framework:核心功能</li>
<li>Spring Data:数据获取</li>
<li>Spring Security:认证授权</li>
<li>Spring AMQP:消息传递</li>
<li>Spring Cloud:服务治理</li>
<li>Spring Validation:参数校验</li>
</ul></li>
</ul>
<div class="note orange anzhiyufont anzhiyu-icon-dengpao modern"><p>为什么诞生SpringBoot?</p>
</div>
<ul>
<li>传统方式构建Spring应用程序
<ul>
<li>导入依赖繁琐</li>
<li>项目配置繁琐</li>
</ul></li>
</ul>
<h2 id="springboot特性">1.2 SpringBoot特性</h2>
<ul>
<li>起步依赖 <p class='p black'>本质为Maven坐标，整合了完成一个功能需要的所有坐标</p></li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-02_15-52-49.png"/></div></div>
<ul>
<li>自动配置 <p class='p black'>遵循约定大约配置的原则，在boot程序启动后，一些bean对象会自动注入到ioc容器，不需要手动声明，简化开发</p></li>
</ul>
<div class="note default modern"><p>比如引入mybatis时,只要引入mybatis-spring-boot-starter自动就会配置SqlSessionFactoryBean,MapperScannerConfigurer</p>
</div>
<ul>
<li>其他特性
<ul>
<li>内嵌的Tomcat,Jetty(无需部署WAR文件)</li>
<li>外部化配置：配置只需要直接修改即可生效，不需要重新启动</li>
<li>不需要XML配置（properties/yml）</li>
</ul></li>
</ul>
<h2 id="创建springboot工程">1.3 创建SpringBoot工程</h2>
<ul>
<li>idea创建SpringBoot项目</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-02_16-19-13.png"/></div></div>
<ul>
<li>HelloController</li>
</ul>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-02_16-22-28.png"/></div></div>
<h1 id="配置文件">2. 配置文件</h1>
<h2 id="properties配置文件">2.1 properties配置文件</h2>
<p class='p black'>创建SpringBoot项目时，就会自动创建application.properties</p>
<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://docs.spring.io/spring-boot/appendix/application-properties/index.html#appendix.application-properties">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Spring官方配置文件说明</div>
            <div class="tag-link-sitename">https://docs.spring.io/spring-boot</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<ul>
<li>application.properties <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改端口号</span><br><span class="line">server.port=9090</span><br><span class="line"># 修改虚拟目录</span><br><span class="line">server.servlet.context-path=/start</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="ymlyaml配置文件">2.2 yml/yaml配置文件</h2>
<ul>
<li>application.yml/application.yaml <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">    port: 9191</span><br><span class="line">    servlet:</span><br><span class="line">        context-path: /start2</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="使用配置到配置文件中的内容">2.3 使用配置到配置文件中的内容</h2>
<p class='p black'>SpringBoot项目中提供了注解获取配置文件中的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># SpringBoot项目中提供了注解获取配置文件中的内容(字段上使用)</span><br><span class="line">@Value(&quot;$&#123;email.user&#125;&quot;)</span><br><span class="line"></span><br><span class="line"># 配置前缀(类上使用)，这样使用就不需要使用@Value注解了，字段名要和配置文件中的英文一致</span><br><span class="line">@ConfigurationProperties(prefix = &#x27;email&#x27;)</span><br></pre></td></tr></table></figure>
<h1 id="springboot整合mybatis">3. SpringBoot整合MyBatis</h1>
<h2 id="引入依赖">3.1 引入依赖</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupld&gt;org.mybatis.spring.boot&lt;/groupld&gt;</span><br><span class="line">    &lt;artifactld&gt;mybatis-spring-boot-starter&lt;/artifactld&gt;</span><br><span class="line">    &lt;version&gt;3.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="配置数据库">3.2 配置数据库</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">    datasource:</span><br><span class="line">        driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">        url: jdbc:mysql://localhost:3306/mybatis</span><br><span class="line">        username: root</span><br><span class="line">        password:1234</span><br></pre></td></tr></table></figure>
<h1 id="bean管理">4. Bean管理</h1>
<h2 id="bean扫描">4.1 Bean扫描</h2>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-02_17-31-28.png"/></div></div>
<ul>
<li>修改扫描其他包-在启动类上添加一下注解 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ComponentScan(basePackages = &quot;com&quot;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="bean注册">4.2 Bean注册</h2>
<h3 id="注册内部的类">4.2.1 注册内部的类</h3>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-02_17-35-17.png"/></div></div>
<h3 id="注册引用的包的类外部的类">4.2.2
注册引用的包的类（外部的类）</h3>
<p class='p black'>如果要注册的bean对象来自于第三方(不是自定义的)，是无法用 @Component 及衍生注解声明bean的</p>
<ul>
<li><p><span class="citation"
data-cites="Bean">@Bean</span>（启动类添加）- <mark class="hl-label red">不建议</mark> 
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 注入Country对象</span><br><span class="line">@Bean</span><br><span class="line">public Country country()&#123;</span><br><span class="line">    return new Country();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p><span class="citation"
data-cites="Bean">@Bean</span>（配置类添加）- <mark class="hl-label red">建议</mark> </p></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class CommonConfig()&#123;</span><br><span class="line">    # 注入Country对象</span><br><span class="line">    @Bean</span><br><span class="line">    public Country country()&#123;</span><br><span class="line">        return new Country();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 如果方法的内部需要使用到ioc容器中已经存在的bean对象，那么只需要在方法上生命即可，spring会自动注入</span><br><span class="line">@Configuration</span><br><span class="line">public class CommonConfig()&#123;</span><br><span class="line">    # 注入Country对象</span><br><span class="line">    @Bean</span><br><span class="line">    public Country country(A a)&#123;</span><br><span class="line">        return new Country(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><span class="citation" data-cites="Import">@Import</span>
<p class='p black'>通过@Import可以引入另一个不在包扫描范围内的配置类</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 方式一</span><br><span class="line">@Import(CommonConfig.class)</span><br><span class="line"></span><br><span class="line"># 方式二</span><br><span class="line">@Import(&#123;CommonConfigA.class, CommonConfigB.class&#125;)</span><br><span class="line"></span><br><span class="line"># 方式三</span><br><span class="line">public class CommonImportSelector implements ImportSelector&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String[] selectImports(AnnotationMetadata importing ClassMetadata)&#123;</span><br><span class="line">        return new String[]&#123;&quot;com.config.CommonConfig&quot;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="注册条件">4.3 注册条件</h2>
<p class='p black'>SpringBoot提供了设置注册生效条件的注解 @Conditional</p>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-02_18-01-28.png"/></div></div>
<h1 id="自动配置原理">5. 自动配置原理</h1>
<p class='p black'>遵循约定大约配置的原则，在boot程序启动后，起步依赖中的一些bean对象会自动注入到ioc容器</p>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-02_18-28-38.png"/></div></div>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-02_18-31-35.png"/></div></div>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-02_18-33-07.png"/></div></div>
<h1 id="自定义starter">6. 自定义starter</h1>
<h2 id="使用场景">6.1 使用场景</h2>
<p class='p black'>在实际开发中，经常会定义一些公共组件，提供给各个项目团队使用。而在SpringBoot的项目中，一般会将这些公共组件封装为 SpringBoot 的starter.</p>
<ul>
<li>需求:自定义mybatis的starter
<ul>
<li>创建 dmybatis-spring-boot-autoconfiqure
模块，提供自动配置功能，并自定义配置文件
META-INF/spring/xxx.imports</li>
<li>创建 dmybatis-spring-boot-starter
模块，在starter中引入自动配置模块</li>
</ul></li>
</ul>
<h1 id="jwt">7. JWT</h1>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-08_09-40-24.png"/></div></div>
<h2 id="jwt生成">7.1 JWT生成</h2>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-08_09-43-13.png"/></div></div>
<h2 id="jwt验证">7.2 JWT验证</h2>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-08_09-46-20.png"/></div></div>
<h2 id="添加到拦截器">7.3 添加到拦截器</h2>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-08_09-50-13.png"/></div></div>
<h1 id="threadlocal">8. ThreadLocal</h1>
<ul>
<li>提供线程局部变量
<ul>
<li>用来存取数据：set()/get()</li>
<li>使用ThreadLocal存储的数据，线程安全</li>
</ul></li>
</ul>
<h1 id="springboot集成redis">9. SpringBoot集成Redis</h1>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-08_10-07-36.png"/></div></div>
]]></content>
      <categories>
        <category>理论知识</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>生活 · 健康指南</title>
    <url>/2025/02/24/%E7%94%9F%E6%B4%BB%C2%B7%E5%81%A5%E5%BA%B7%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<div class="note info modern"><p>info
作为长期加班的程序员，健康管理尤为重要。以下的养生方案，兼顾实用性和效率，帮助您在工作中保持身体和心理的平衡</p>
</div>
<h1 id="饮食">1. 饮食</h1>
<h2 id="喝茶">1.1 喝茶</h2>
<ul>
<li>茶叶中含有多种有益物质，如咖啡碱、维生素C、茶多酚等，这些物质具有<span class='p green'>提神醒脑、清热解毒、软化血管、减肥</span>等功效。此外，茶叶还具有<span class='p green'>抗氧化、抗衰老、增加免疫力</span>等作用。长期喝茶水，能消除疲劳、增强记忆力等。
<div class="note warning flat"><p>但请注意，茶叶中的咖啡因含量较高，过量饮用可能会引起<span
class="p red">心悸</span>、<span
class="p red">失眠</span>等不良反应。因此，建议适量饮用茶水，每天不要超过3-5杯。</p>
</div> <p class='p center logo large'>茶的种类</p></li>
</ul>
<ol type="1">
<li><p>绿茶：绿茶富含儿茶素、茶氨酸和茶多酚等抗氧化剂，可以提高新陈代谢、降低胆固醇、减缓衰老等。绿茶具有防癌、降血脂、降血压的功效，非常适合中年男性、肥胖的人进行服用。</p></li>
<li><p>白茶：白茶含有丰富的茶多酚，具有抗氧化、抗癌、强化免疫系统、降低血糖、调节血脂等功能。白茶具有明目、保肝、护肝的功效，经常饮酒的人，经常发脾气的人，总是坐在办公室的人，视力下降的人是比较适合应用的。</p></li>
<li><p>黑茶：黑茶中含有的茶黄素和茶红素具有较高的抗氧化性能，能够降低胆固醇，调节肠道菌群，促进消化等。黑茶也是发酵茶，具有更加明显的降低血脂、解除油腻的功效，总是吃大鱼大肉的人比较适合饮用黑茶。</p></li>
<li><p>乌龙茶：乌龙茶中含有的茶多酚和儿茶素具有抗氧化、降低血脂、防治肥胖、抑制致癌物质等多种功能。</p></li>
<li><p>紫砂茶：紫砂茶中有丰富的多酚类物质和微量元素，这些物质可以清除自由基、降低血压、降血脂等功能。</p></li>
<li><p>黄茶，黄茶属于发酵茶，有益脾胃，有利于消化，对于身体虚弱、消化不良的人可以应用。</p></li>
<li><p>青茶，青茶属于半发酵茶，又称为乌龙茶，可以很好的降低血脂、抗衰老，对于老年男性是很适合的。</p></li>
<li><p>红茶，红茶是全发酵茶，可以很好的调养脾胃，特别是对于胃寒患者，长时间吃东西不消化的患者，比较适合。</p></li>
</ol>
<h1 id="行为习惯">2. 行为习惯</h1>
<h2 id="番茄钟工作法">2.1 番茄钟工作法</h2>
<ol type="1">
<li><p>每25分钟强制休息5分钟，用物理计时器（非手机）提醒</p></li>
<li><p>休息时做「20-20-20护眼法则」：看20英尺外20秒+闭眼转动眼球</p></li>
<li><p>每小时做3分钟颈椎米字操（用下巴写米字）</p></li>
<li><p>每25分钟站立办公替代坐姿</p></li>
</ol>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>健康指南</tag>
      </tags>
  </entry>
  <entry>
    <title>生活 · 头发呵护指南</title>
    <url>/2025/02/24/%E7%94%9F%E6%B4%BB%C2%B7%E5%A4%B4%E5%8F%91%E5%91%B5%E6%8A%A4%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="洗发水">1. 洗发水</h1>
<ul>
<li>短发，每天洗（建议2-3天洗）：成分推荐：第二位：月桂醇XX胺，XXX牛磺酸钠，月桂酰肌氨酸钠，月桂酰胺丙基甜菜碱
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-11_20-21-03.png"/></div></div>
<ul>
<li>超级种子-雪松头皮清洁洗发水</li>
<li>施华蔻-氨基酸赋活修复洗发露</li>
<li>缕灵-丰盈蓬松空气感洗发水</li>
</ul></li>
<li>短发（2-3天洗）：
<ul>
<li>丝蓓绮的沁润臻致修护洗发露</li>
<li>滋源的无患子控油轻盈洗头水(油性)</li>
<li>卡诗的耀光凝色晶透洗发水（价格高）</li>
<li>爱马仕橘绿之泉二合一洗发沐浴啫喱（价格高）</li>
</ul></li>
<li>短发（2-3天洗）+头屑多
<ul>
<li>珂岸的氨基酸控油净澈洗发水</li>
<li>海飞丝头皮专研洗发露控油抑屑型</li>
</ul></li>
<li>长发（&lt;3天洗/油性）
<ul>
<li>蓝吕舒爽清润净澈去屑洗发水</li>
</ul></li>
<li>长发（&gt;=3天洗/干性）
<ul>
<li>水之密语浸润臻养洗发露(倍润型) <div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-11_21-02-05.png"/></div></div></li>
</ul></li>
</ul>
<h1 id="洗面奶">2. 洗面奶</h1>
<ul>
<li>氨基酸洗面奶
<ul>
<li>Xx酰xX氨酸钠/钾</li>
<li>前四位：Xx酰xX氨酸钠/钾</li>
<li>干皮：最好后面也 Xx酰xX氨酸钠/钾</li>
<li>油皮：椰油酰股丙基甜菜碱</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>头发呵护指南</tag>
      </tags>
  </entry>
  <entry>
    <title>生活 · 恋爱</title>
    <url>/2025/03/09/%E7%94%9F%E6%B4%BB%C2%B7%E6%81%8B%E7%88%B1/</url>
    <content><![CDATA[<div class="note info modern"><p>info 恋爱指南</p>
</div>
<h1 id="恋爱提升">1. 恋爱提升</h1>
<ul>
<li>朋友圈 图片，个人图片，展示区</li>
<li>健身：腹肌，瘦腿，方便拍照</li>
<li>穿搭</li>
<li>发型</li>
<li>唱歌</li>
</ul>
<h1 id="恋爱技巧">2. 恋爱技巧</h1>
<h2 id="说话">2.1 说话</h2>
<pre><code>* 说话：传递关系，情绪，态度，需要走心
* 升级关系：
    * 日常：1/4 星座，瞎扯，做了什么之类的
    * 对方的感兴趣点，主动开启的话题 1/4
    * 自己价值的展示（优秀点，生活，细节） 1/4: 每周半天体验生活，商圈，网红点之类的，装修风格好的地点
    * 升级关系 1/4
* 说客套话，认真的话：需要认真走心仔细的解释，走心
* 所有的拒绝都是在给机会，给你一个解决问题的机会，要不会把你拉黑的</code></pre>
<h2 id="情感中的升级关系">2.2 情感中的升级关系</h2>
<ul>
<li>面子，自尊心，牌坊丢掉，全部给她</li>
<li>表达好感，解决对方疑虑，解析对方想法，只求过程不求结果的人</li>
</ul>
<h1 id="朋友圈建设">3. 朋友圈建设</h1>
<h2 id="头像建设">3.1 头像建设</h2>
<ul>
<li>可以自拍（凸显帅气，稳重）</li>
<li>可以人物头像</li>
<li>不要用沙雕头像</li>
</ul>
<h2 id="朋友圈背景">3.2 朋友圈背景</h2>
<ul>
<li>如果可以炫富，可以放到这里</li>
<li>人物元素要少</li>
<li>展示优点</li>
</ul>
<h2 id="个性签名">3.3 个性签名</h2>
<ul>
<li>可以文艺，幽默</li>
</ul>
<h2 id="朋友圈的展示内容">3.4 朋友圈的展示内容</h2>
<ul>
<li><p>一个月一条，一周一条</p></li>
<li><p>美食</p>
<ul>
<li>不要有垃圾饮食，需要拍出来好看，价值</li>
</ul></li>
<li><p>社交</p>
<ul>
<li>展示积极生活状态</li>
<li>社交合照 合影，最好有女生，生活丰富有趣</li>
</ul></li>
<li><p>工作</p>
<ul>
<li>展示上进心，表达对未来的期待</li>
</ul></li>
<li><p>英文歌+文案（文艺）</p></li>
<li><p>旅游打卡+定位</p></li>
<li><p>健身房 对境自拍，撸铁照片</p></li>
<li><p>路边猫猫狗狗</p></li>
<li><p>发朋友圈时应该避开的3个坑</p>
<ul>
<li>过分浮夸</li>
<li>太端着装文艺</li>
<li>用网图照片</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>恋爱</tag>
      </tags>
  </entry>
  <entry>
    <title>生活 · 烹饪</title>
    <url>/2025/02/24/%E7%94%9F%E6%B4%BB%C2%B7%E7%83%B9%E9%A5%AA/</url>
    <content><![CDATA[<h1 id="甜点">1. 甜点</h1>
<h2 id="蛋糕">1.1 蛋糕</h2>
<h3 id="工具">1.1.1 工具</h3>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>烹饪</tag>
      </tags>
  </entry>
  <entry>
    <title>生活 · 穿搭指南</title>
    <url>/2025/03/05/%E7%94%9F%E6%B4%BB%C2%B7%E7%A9%BF%E6%90%AD%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<div class="note info modern"><p>info 是否还不知道应该穿什么样的衣服，是否逛淘宝店看了半天也不满意</p>
</div>
<h1 id="购衣指南">1. 购衣指南</h1>
<ul>
<li>面料，版型，特点</li>
<li>面料 <div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/Snipaste_2025-03-06_20-46-16.png"/></div></div>
<ul>
<li>牛仔，皮革：材质偏硬，可以用于拔高视觉比例和平衡头肩比</li>
<li>棉布，亚麻：垂感很强，肩窄不要尝试</li>
<li>摇粒绒，针织：视觉上给人温暖，可爱，居家</li>
</ul></li>
<li>版型
<ul>
<li>上身
<ul>
<li>背心：阳光</li>
<li>卫衣：居家</li>
<li>毛衣：居家</li>
<li>夹克</li>
<li>开衫：年少</li>
<li>冲锋衣</li>
<li>polo衫：年少</li>
<li>衬衫</li>
<li>风衣：时尚</li>
</ul></li>
<li>下身
<ul>
<li>背带裤</li>
<li>工装裤</li>
<li>紧身裤</li>
<li>灯笼裤</li>
<li>喇叭裤</li>
<li>哈伦裤</li>
<li>裙裤</li>
</ul></li>
</ul></li>
<li>特点
<ul>
<li>反光</li>
<li>防水</li>
<li>速干</li>
</ul></li>
<li>装饰
<ul>
<li>铁链</li>
<li>飘带</li>
<li>柳钉</li>
</ul></li>
</ul>
<h2 id="购衣">1.1 购衣</h2>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>穿搭指南</tag>
      </tags>
  </entry>
  <entry>
    <title>面试宝典 · JavaSE</title>
    <url>/2025/02/27/%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8%C2%B7JavaSE%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/</url>
    <content><![CDATA[<h1 id="基础概念与常识">1. 基础概念与常识</h1>
<h2 id="java语言有哪些特点">1.1 Java语言有哪些特点？</h2>
<details class="folding-tag" cyan><summary> Java语言有哪些特点？ </summary>
              <div class='content'>
              <ul><li>简单易学（语法简单，上手容易）；</li><li>面向对象（封装，继承，多态）；</li><li>平台无关性（ Java 虚拟机实现平台无关性）；</li><li>支持多线程（ C++语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而Java 语言却提供了多线程支持）；</li><li>可靠性（具备异常处理和自动内存管理机制）；</li><li>安全性（Java语言本身的设计就提供了多重安全防护机制如访问权限修饰符、限制程序直接访问操作系统资源）；</li><li>高效性（通过 Just In Time 编译器等技术的优化，Java语言的运行效率还是非常不错的）；</li><li>支持网络编程并且很方便；</li><li>编译与解释并存；</li></ul>
              </div>
            </details>
<h2 id="javase-vs-javaee">1.2 JavaSE vs JavaEE</h2>
<details class="folding-tag" cyan><summary> JavaSE vs JavaEE </summary>
              <div class='content'>
              <ul><li>Java SE（Java Platform，Standard Edition）: Java 平台标准版，Java编程语言的基础，它包含了支持 Java应用程序开发和运行的核心类库以及虚拟机等核心组件。Java SE可以用于构建桌面应用程序或简单的服务器应用程序。</li><li>Java EE（Java Platform, Enterprise Edition ）：Java平台企业版，建立在 Java SE的基础上，包含了支持企业级应用程序开发和部署的标准和规范（比如Servlet、JSP、EJB、JDBC、JPA、JTA、JavaMail、JMS）。 Java EE可以用于构建分布式、可移植、健壮、可伸缩和安全的服务端 Java应用程序，例如 Web 应用程序。</li><li>简单来说，Java SE 是 Java 的基础版本，Java EE 是 Java的高级版本。Java SE 更适合开发桌面应用程序或简单的服务器应用程序，JavaEE 更适合开发复杂的企业级应用程序或 Web 应用程序。</li><li>除了 Java SE 和 Java EE，还有一个 Java ME（Java Platform，MicroEdition）。Java ME 是 Java的微型版本，主要用于开发嵌入式消费电子设备的应用程序，例如手机、PDA、机顶盒、冰箱、空调等。JavaME 无需重点关注，知道有这个东西就好了，现在已经用不上了。</li></ul>
              </div>
            </details>
<h2 id="jvm-vs-jdk-vs-jre">1.3 JVM vs JDK vs JRE</h2>
<details class="folding-tag" cyan><summary> JVM vs JDK vs JRE </summary>
              <div class='content'>
              <h1 id="jvm">1. JVM</h1><ul><li>Java 虚拟机（Java Virtual Machine, JVM）是运行 Java字节码的虚拟机。JVM有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。</li><li>如下图所示，不同编程语言（Java、Groovy、Kotlin、JRuby、Clojure…）通过各自的编译器编译成 .class 文件，并最终通过 JVM在不同平台（Windows、Mac、Linux）上运行。</li></ul><h1 id="jdk-和-jre">2. JDK 和 JRE</h1><ul><li>JDK（Java Development Kit）是一个功能齐全的 Java开发工具包，供开发者使用，用于创建和编译 Java 程序。它包含了 JRE（JavaRuntime Environment），以及编译器 javac 和其他工具，如javadoc（文档生成器）、jdb（调试器）、jconsole（监控工具）、javap（反编译工具）等。</li><li>JRE 是运行已编译 Java 程序所需的环境，主要包含以下两个部分：</li></ul><ol type="1"><li>JVM : 也就是我们上面提到的 Java 虚拟机。</li><li>Java 基础类库（Class Library）：一组标准的类库，提供常用的功能和API（如 I/O 操作、网络通信、数据结构等）。</li></ol>
              </div>
            </details>
]]></content>
      <categories>
        <category>面试宝典</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>面试宝典 · MySQL</title>
    <url>/2025/02/27/%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8%C2%B7MySQL/</url>
    <content><![CDATA[<h1 id="mysql中有哪几种锁">1. MySQL中有哪几种锁?</h1>
<details class="folding-tag" cyan><summary> MySQL中有哪几种锁? </summary>
              <div class='content'>
              <h1 id="mysql中的锁机制">MySQL中的锁机制</h1><p>MySQL的锁机制用于确保数据一致性和并发控制，主要根据<strong>锁的粒度</strong>、<strong>兼容性</strong>和<strong>用途</strong>进行分类。</p><hr /><h2 id="一按锁的粒度分类">一、按锁的粒度分类</h2><h3 id="表级锁table-level-locks">1. 表级锁（Table-Level Locks）</h3><ul><li><strong>特点</strong><br />锁定整张表，并发性能低，但开销小。</li><li><strong>适用场景</strong><br />MyISAM引擎默认使用表级锁；InnoDB执行DDL（如<code>ALTER TABLE</code>）时也会加表锁。</li><li><strong>常见类型</strong><ul><li><strong>表共享读锁（S锁）</strong>：允许多个会话读表，阻塞写操作。</li><li><strong>表独占写锁（X锁）</strong>：独占锁，阻塞其他会话的读写操作。</li></ul></li></ul><h3 id="行级锁row-level-locks">2. 行级锁（Row-Level Locks）</h3><ul><li><strong>特点</strong><br />锁定单行或多行，并发性能高，但开销大（依赖索引）。</li><li><strong>适用场景</strong><br />Inno引擎默认支持行级锁。</li><li><strong>细分类型</strong><ul><li><strong>记录锁（Record Locks）</strong>：锁定索引中的某一行。</li><li><strong>间隙锁（GapLocks）</strong>：锁定索引记录之间的间隙，防止幻读（如<code>id BETWEEN 5 AND 10</code>的间隙）。</li><li><strong>临键锁（Next-Key Locks）</strong>：记录锁 +间隙锁，锁定左开右闭区间（如<code>(5, 10]</code>），InnoDB默认行锁算法。</li></ul></li></ul><h3 id="页级锁page-level-locks">3. 页级锁（Page-Level Locks）</h3><ul><li><strong>特点</strong><br />锁定数据页（如4KB），粒度介于表锁和行锁之间。</li><li><strong>适用场景</strong><br />BDB引擎支持，但已逐渐被淘汰。</li></ul><hr /><h2 id="二按锁的兼容性分类">二、按锁的兼容性分类</h2><h3 id="共享锁shared-lock-s锁">1. 共享锁（Shared Lock, S锁）</h3><ul><li><strong>特点</strong><br />允许其他事务读同一数据，阻塞写操作。</li><li><strong>加锁方式</strong><br /><code>SELECT ... LOCK IN SHARE MODE</code>。</li></ul><h3 id="排他锁exclusive-lock-x锁">2. 排他锁（Exclusive Lock, X锁）</h3><ul><li><strong>特点</strong><br />禁止其他事务读写被锁数据。</li><li><strong>加锁方式</strong><br /><code>SELECT ... FOR UPDATE</code>，或自动由<code>UPDATE</code>/<code>DELETE</code>添加。</li></ul><h3 id="意向锁intention-locks">3. 意向锁（Intention Locks）</h3><ul><li><strong>作用</strong><br />快速判断表级锁和行级锁的冲突。</li><li><strong>类型</strong><ul><li><strong>意向共享锁（IS锁）</strong>：事务计划对某些行加S锁。</li><li><strong>意向排他锁（IX锁）</strong>：事务计划对某些行加X锁。</li></ul></li><li><strong>兼容性</strong><br />IS与IX互相兼容，但会与表级X锁冲突。</li></ul><hr /><h2 id="三按特殊用途分类">三、按特殊用途分类</h2><h3 id="自增锁auto-inc-lock">1. 自增锁（AUTO-INC Lock）</h3><ul><li><strong>作用</strong><br />确保自增列（<code>AUTO_INCREMENT</code>）的值连续唯一。</li><li><strong>特点</strong><br />默认模式为表级锁，MySQL 8.0引入轻量级锁优化（“交错模式”）。</li></ul><h3 id="元数据锁metadata-lock-mdl">2. 元数据锁（Metadata Lock,MDL）</h3><ul><li><strong>作用</strong><br />保护表结构（如防止查询时执行<code>ALTER TABLE</code>）。</li><li><strong>加锁方式</strong><br />读操作加MDL读锁，结构修改加MDL写锁。</li></ul><h3 id="插入意向锁insert-intention-lock">3. 插入意向锁（Insert IntentionLock）</h3><ul><li><strong>作用</strong><br />标记间隙内的插入意向，优化并发插入。</li><li><strong>特点</strong><br />允许多个事务在同一间隙的不同位置插入数据。</li></ul><hr /><h2 id="四存储引擎与锁的支持">四、存储引擎与锁的支持</h2><table><colgroup><col style="width: 9%" /><col style="width: 47%" /><col style="width: 42%" /></colgroup><thead><tr><th>引擎</th><th>支持的锁类型</th><th>特点</th></tr></thead><tbody><tr><td>InnoDB</td><td>行级锁（记录锁、间隙锁、临键锁）、表级锁（意向锁、自增锁）</td><td>默认支持可重复读隔离级别，解决幻读问题</td></tr><tr><td>MyISAM</td><td>表级锁（S锁、X锁）</td><td>适合读多写少场景，不支持事务</td></tr></tbody></table><hr /><h2 id="五锁的兼容性矩阵">五、锁的兼容性矩阵</h2><table><thead><tr><th>当前锁  请求锁</th><th>S锁</th><th>X锁</th><th>IS锁</th><th>IX锁</th></tr></thead><tbody><tr><td>S锁</td><td>✔️</td><td>❌</td><td>✔️</td><td>❌</td></tr><tr><td>X锁</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>IS锁</td><td>✔️</td><td>❌</td><td>✔️</td><td>✔️</td></tr><tr><td>IX锁</td><td>❌</td><td>❌</td><td>✔️</td><td>✔️</td></tr></tbody></table><hr /><h2 id="六示例场景">六、示例场景</h2><h3 id="共享锁s锁">1. 共享锁（S锁）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 会话1：对id=1的行加共享锁</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> LOCK <span class="keyword">IN</span> SHARE MODE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 会话2：可以读取该行，但写操作会被阻塞</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;          <span class="comment">-- 允许执行</span></span><br><span class="line"><span class="keyword">UPDATE</span> users <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;Alice&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 阻塞，直到会话1释放锁</span></span><br></pre></td></tr></table></figure><h3 id="排他锁x锁">2. 排他锁（X锁）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 会话1：对id=1的行加排他锁</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 会话2：读写该行均会被阻塞</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> LOCK <span class="keyword">IN</span> SHARE MODE; <span class="comment">-- 阻塞</span></span><br><span class="line"><span class="keyword">UPDATE</span> users <span class="keyword">SET</span> age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;              <span class="comment">-- 阻塞</span></span><br></pre></td></tr></table></figure><h3 id="间隙锁gap-lock">3. 间隙锁（Gap Lock）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 假设表中存在id=5和id=10的记录</span></span><br><span class="line"><span class="comment">-- 会话1：锁定id=5到id=10之间的间隙</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">10</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 会话2：尝试插入id=7的记录会被阻塞</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> users (id, name) <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">&#x27;Bob&#x27;</span>); <span class="comment">-- 阻塞</span></span><br></pre></td></tr></table></figure><h3 id="临键锁next-key-lock">4. 临键锁（Next-Key Lock）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 会话1：锁定id&gt;10的所有记录及后续间隙（如(10, +∞)）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">&gt;</span> <span class="number">10</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 会话2：插入或修改id&gt;10的记录均会被阻塞</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> users (id, name) <span class="keyword">VALUES</span> (<span class="number">15</span>, <span class="string">&#x27;Charlie&#x27;</span>); <span class="comment">-- 阻塞</span></span><br><span class="line"><span class="keyword">UPDATE</span> users <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;Dave&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">12</span>;         <span class="comment">-- 阻塞</span></span><br></pre></td></tr></table></figure><h3 id="插入意向锁insert-intention-lock-1">5. 插入意向锁（InsertIntention Lock）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 会话1：锁定id=5到id=10的间隙</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">10</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 会话2：尝试在间隙内插入id=8的记录会触发插入意向锁</span></span><br><span class="line"><span class="comment">-- （实际会阻塞，直到会话1释放锁）</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> users (id, name) <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">&#x27;Eve&#x27;</span>);</span><br></pre></td></tr></table></figure><p>说明</p><ul><li><p>上述示例需在事务中执行（如BEGIN; …COMMIT;），否则锁会立即释放。</p></li><li><p>不同事务隔离级别（如READ COMMITTED和REPEATABLEREAD）会影响锁的行为，例如间隙锁在READ COMMITTED下可能不生效。</p></li></ul>
              </div>
            </details>
]]></content>
      <categories>
        <category>面试宝典</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>面试宝典 · 面试算法题库</title>
    <url>/2025/03/13/%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8%C2%B7%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/</url>
    <content><![CDATA[<div class="note red anzhiyufont anzhiyu-icon-fan modern"><p>本文章记录面试算法题库内容，包含各类题库</p>
</div>
<h1 id="难度简单">1.难度：简单</h1>
<h2 id="两数之和">1.1 两数之和</h2>
<details class="folding-tag" yellow=""><summary> 难度：简单   考察点：数组 </summary>
              <div class="content">
              <ul><li><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值 target 的那 两个 整数，并返回它们的数组下标。</p></li><li><p>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。</p></li><li><p>你可以按任意顺序返回答案。</p></li><li><p>示例 1： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure></p></li><li><p>示例 2： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure></p></li><li><p>示例 3： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure></p></li></ul>
              </div>
            </details>
<details class="folding-tag" cyan=""><summary> 个人题解 </summary>
              <div class="content">
              <ul><li>时间复杂度：O(N 2)，其中 N是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。</li><li>空间复杂度：O(1)。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) {</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; nums.length; i++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++){</span><br><span class="line">                <span class="keyword">if</span>(nums[i] + nums[j] == target){</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]{i, j};</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul>
              </div>
            </details>
<details class="folding-tag" green=""><summary> 优秀题解 </summary>
              <div class="content">
              <ul><li><p>时间复杂度：O(N)，其中 N 是数组中的元素数量。对于每一个元素x，我们可以 O(1) 地寻找 target - x。</p></li><li><p>空间复杂度：O(N)，其中 N 是数组中的元素数量。主要为哈希表的开销。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) {</span><br><span class="line">        Map&lt;Integer, Integer&gt; hashtable = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; ++i) {</span><br><span class="line">            <span class="keyword">if</span> (hashtable.containsKey(target - nums[i])) {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]{hashtable.get(target - nums[i]), i};</span><br><span class="line">            }</span><br><span class="line">            hashtable.put(nums[i], i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">作者：力扣官方题解</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/two-sum/solutions/434597/liang-shu-zhi-he-by-leetcode-solution/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure></p></li></ul>
              </div>
            </details>
]]></content>
      <categories>
        <category>面试宝典</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>项目学习 · 小谷充电宝</title>
    <url>/2025/03/21/%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%C2%B7%E5%B0%8F%E8%B0%B7%E5%85%85%E7%94%B5%E5%AE%9D/</url>
    <content><![CDATA[<h1 id="项目介绍">1. 项目介绍</h1>
<h2 id="项目学习链接">1.1 项目学习链接</h2>
<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1HCQBYUERb">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">小谷充电宝</div>
            <div class="tag-link-sitename">https://www.bilibili.com/video/BV1HCQBYUERb</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<h2 id="代码仓库链接">1.2 代码仓库链接</h2>
<h2 id="项目简介">1.3 项目简介</h2>
<ul>
<li>共享充电宝是基于若依微服务版本框架开发的一个共享系统，项目包含平台管理端与微信小程序端，是一个前后端分离的项目。共享充电宝分为后台系统和前台微信小程序。</li>
<li>后台系统功能：用户登录、系统管理员列表、角色管理、权限规则管理、柜机管理、柜机分类、充电宝管理…</li>
<li>前台微信小程序功能：首页、附近门店、门店信息、登录功能、扫码、Mqtt通信、我的订单、微信支付…</li>
<li>其中覆盖了分布式文件系统、高速缓存、消息队列等多种业务场景和技术实现。</li>
</ul>
<h2 id="技术栈清单">1.4 技术栈清单</h2>
<ul>
<li>Java体系
<ul>
<li>SpringBoot</li>
<li>SpringCloud</li>
<li>MyBatisPlus</li>
<li>Redis</li>
<li>RabbitMQ</li>
<li>MySQL</li>
<li>MongoDB</li>
<li>MinlO</li>
<li>微信支付</li>
</ul></li>
<li>嵌入式技术
<ul>
<li>MQTT</li>
</ul></li>
<li>AI部分技术
<ul>
<li>Spring AI</li>
<li>DeepSeek</li>
</ul></li>
<li>前端技术
<ul>
<li>Vue3:Vue.js的最新版本</li>
<li>Element Plus:一个基于Vue.js 3.0的组件库，它是Element
UI的升级版本</li>
<li>Vite：一种新型前端构建工具</li>
<li>Node.js:JavaScript运行环境</li>
<li>uni-app:前端应用框架</li>
</ul></li>
</ul>
<h2 id="技术架构图">1.5 技术架构图</h2>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/share-jgt.png"/></div></div>
<h1 id="系分设计">2. 系分设计</h1>
<h2 id="业务流程图">2.1 业务流程图</h2>
<div class="img-wrap"><div class="img-bg"><img class="img" src="/images/page_img/share-lct.png"/></div></div>
<h1 id="项目环境">3. 项目环境</h1>
<h2 id="准备软件环境">3.1 准备软件环境</h2>
<h2 id="搭建项目后端环境">3.2 搭建项目后端环境</h2>
<h2 id="搭建项目前端环境">3.3 搭建项目前端环境</h2>
]]></content>
      <categories>
        <category>项目学习</category>
      </categories>
      <tags>
        <tag>小谷充电宝</tag>
      </tags>
  </entry>
  <entry>
    <title>项目实践 · Aurora电商</title>
    <url>/2025/02/27/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%C2%B7%E7%94%B5%E5%95%86mall/</url>
    <content><![CDATA[<h1 id="项目介绍">1. 项目介绍</h1>
<h2 id="项目选取原因">1.1 项目选取原因</h2>
<ul>
<li>电商系统复杂度足够（大促，双11，秒杀）</li>
<li>市场覆盖面广（商业化就会用到）</li>
</ul>
<h2 id="项目背景介绍">1.2 项目背景介绍</h2>
<ul>
<li>包含个人，线下商家(售卖物品，售卖服务)，线下工厂，线下厂商，线上商家，线上工厂，线上厂商</li>
</ul>
<h2 id="技术栈清单">1.3 技术栈清单</h2>
]]></content>
      <categories>
        <category>项目实践</category>
      </categories>
      <tags>
        <tag>Aurora电商</tag>
      </tags>
  </entry>
  <entry>
    <title>项目实践 · 图床GitHub+PicGo</title>
    <url>/2025/03/01/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%C2%B7GitHub%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-bullhorn flat"><p><mark class="hl-label orange">引用文章</mark></p>
<ul>
<li>GitHub+PicGo搭建免费图床：<a
href="https://zhuanlan.zhihu.com/p/616138380">https://zhuanlan.zhihu.com/p/616138380</a></li>
</ul>
</div>
]]></content>
      <categories>
        <category>项目实践</category>
      </categories>
      <tags>
        <tag>图床GitHub+PicGo</tag>
      </tags>
  </entry>
</search>
